<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tensorflow系列教程4-TF中的关于Data的API</title>
    <url>/2020/02/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E5%9B%9B%E8%AE%B2Tensorflow-DataAPI/</url>
    <content><![CDATA[<p>​    <img src="/2020/02/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E5%9B%9B%E8%AE%B2Tensorflow-DataAPI/bg.jpg" alt>   </p>
<a id="more"></a>

<h1 id="Tensorflow系列教程4-TF中的关于Data的API"><a href="#Tensorflow系列教程4-TF中的关于Data的API" class="headerlink" title="Tensorflow系列教程4-TF中的关于Data的API"></a>Tensorflow系列教程4-TF中的关于Data的API</h1><h2 id="Dataset基本API的使用"><a href="#Dataset基本API的使用" class="headerlink" title="Dataset基本API的使用"></a>Dataset基本API的使用</h2><ul>
<li><p>tf.data.Dataset.from_tensor_slices</p>
<p>from_tensor_slices支持元组数据、list数据、字典数据和numpy数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支持numpy数据</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices(np.arange(<span class="number">10</span>))</span><br><span class="line">print(dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持list数据</span></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataset:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">y = np.array([<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fox'</span>])</span><br><span class="line"><span class="comment"># 支持元组</span></span><br><span class="line">dataset3 = tf.data.Dataset.from_tensor_slices((x, y))</span><br><span class="line"><span class="keyword">for</span> item_x, item_y <span class="keyword">in</span> dataset3:</span><br><span class="line">    print(item_x.numpy(), item_y.numpy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持字典</span></span><br><span class="line">dataset4 = tf.data.Dataset.from_tensor_slices(&#123;<span class="string">"feature"</span>: x, <span class="string">"label"</span>: y&#125;)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataset4:</span><br><span class="line">    print(item[<span class="string">'feature'</span>].numpy(), item[<span class="string">'label'</span>].numpy())</span><br></pre></td></tr></table></figure>
</li>
<li><p>repeat/batch/interleacve/map/shuffle/list_files</p>
<p>repeat/batch</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices(np.arange(<span class="number">10</span>))</span><br><span class="line">dataset2 = dataset.repeat(<span class="number">3</span>).batch(<span class="number">7</span>)<span class="comment"># 全部数据重复3次 每组数据取7个值</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataset2:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.Tensor([<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], shape=(<span class="number">7</span>,), dtype=int32)</span><br><span class="line">tf.Tensor([<span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>], shape=(<span class="number">7</span>,), dtype=int32)</span><br><span class="line">tf.Tensor([<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span>], shape=(<span class="number">7</span>,), dtype=int32)</span><br><span class="line">tf.Tensor([<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>], shape=(<span class="number">7</span>,), dtype=int32)</span><br><span class="line">tf.Tensor([<span class="number">8</span> <span class="number">9</span>], shape=(<span class="number">2</span>,), dtype=int32)</span><br></pre></td></tr></table></figure>

<p>interleacve</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices(np.arange(<span class="number">10</span>))</span><br><span class="line">dataset2 = dataset.repeat(<span class="number">3</span>).batch(<span class="number">7</span>)</span><br><span class="line">dataset3 = dataset2.interleave(</span><br><span class="line">    <span class="comment"># map_fun</span></span><br><span class="line">    <span class="keyword">lambda</span> v: tf.data.Dataset.from_tensor_slices(v),</span><br><span class="line">    <span class="comment"># cycle_length 并行程度</span></span><br><span class="line">    cycle_length=<span class="number">5</span>,</span><br><span class="line">    <span class="comment"># block_length</span></span><br><span class="line">    block_length=<span class="number">5</span> <span class="comment"># 对每一个epoch的数据优先取前5个</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataset3:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf.Tensor(0, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(1, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(2, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(3, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(4, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(7, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(8, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(9, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(0, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(1, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(4, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(5, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(6, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(7, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(8, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(1, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(2, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(3, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(4, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(5, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(8, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(9, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(5, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(6, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(2, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(3, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(9, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(0, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(6, shape&#x3D;(), dtype&#x3D;int32)</span><br><span class="line">tf.Tensor(7, shape&#x3D;(), dtype&#x3D;int32)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Dataset读取csv文件"><a href="#Dataset读取csv文件" class="headerlink" title="Dataset读取csv文件"></a>Dataset读取csv文件</h2><ul>
<li><p>tf.data.TextLineDataset,tf.io.decode_csv</p>
<p>首先生成csv文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br><span class="line">print(sys.version_info)</span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> mpl, np, pd, sklearn, tf, keras:</span><br><span class="line">    print(module.__name__, module.__version__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line">housing = fetch_california_housing()</span><br><span class="line">print(housing.DESCR)</span><br><span class="line">print(housing.data.shape)</span><br><span class="line">print(housing.target.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">x_train_all, x_test, y_train_all, y_test = train_test_split(housing.data, housing.target, random_state=<span class="number">7</span>)</span><br><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(x_train_all, y_train_all, random_state=<span class="number">11</span>)</span><br><span class="line">print(x_train.shape, y_train.shape)</span><br><span class="line">print(x_valid.shape, y_valid.shape)</span><br><span class="line">print(x_test.shape, y_test.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_train_scaled = scaler.fit_transform(x_train)</span><br><span class="line">x_valid_scaled = scaler.fit_transform(x_valid)</span><br><span class="line">x_test_scaled = scaler.fit_transform(x_test)</span><br><span class="line"></span><br><span class="line">output_dir = <span class="string">"generate_csv"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">    os.mkdir(output_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span><span class="params">(output_dir, data, name_prefix,</span></span></span><br><span class="line"><span class="function"><span class="params">                header=None, n_parts=<span class="number">10</span>)</span>:</span></span><br><span class="line">    path_format = os.path.join(output_dir, <span class="string">"&#123;&#125;_&#123;:02d&#125;.csv"</span>)</span><br><span class="line">    filenames = []</span><br><span class="line">    <span class="keyword">for</span> file_idx, row_indices <span class="keyword">in</span> enumerate(np.array_split(np.arange(len(data)), n_parts)):</span><br><span class="line">        part_csv = path_format.format(name_prefix, file_idx)</span><br><span class="line">        filenames.append(part_csv)</span><br><span class="line">        <span class="keyword">with</span> open(part_csv, <span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">if</span> header <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                f.write(header + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> row_index <span class="keyword">in</span> row_indices:</span><br><span class="line">                f.write(<span class="string">","</span>.join([repr(col) <span class="keyword">for</span> col <span class="keyword">in</span> data[row_index]]))</span><br><span class="line">                f.write(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> filenames</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_data = np.c_[x_train_scaled, y_train]</span><br><span class="line">valid_data = np.c_[x_valid_scaled, y_valid]</span><br><span class="line">test_data = np.c_[x_test_scaled, y_test]</span><br><span class="line"></span><br><span class="line">header_cols = housing.feature_names + [<span class="string">'MidianHouseValue'</span>]</span><br><span class="line">header_str = <span class="string">','</span>.join(header_cols)</span><br><span class="line"></span><br><span class="line">train_filenames = save_to_csv(output_dir, train_data, <span class="string">"train"</span>, header_str, n_parts=<span class="number">20</span>)</span><br><span class="line">valid_filenames = save_to_csv(output_dir, valid_data, <span class="string">"valid"</span>, header_str, n_parts=<span class="number">10</span>)</span><br><span class="line">test_filenames = save_to_csv(output_dir, test_data, <span class="string">"test"</span>, header_str, n_parts=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># decode_csv解析字符串</span></span><br><span class="line">sample_str = <span class="string">"1,2,3,4,5"</span></span><br><span class="line"><span class="comment"># 默认类型</span></span><br><span class="line">record_defaults = [</span><br><span class="line">    tf.constant(<span class="number">0</span>, dtype=tf.int32),</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    np.nan,</span><br><span class="line">    <span class="string">"hello"</span>,</span><br><span class="line">    tf.constant([])</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">parsed_fields = tf.io.decode_csv(sample_str, record_defaults=record_defaults)</span><br><span class="line">print(parsed_fields)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串与record_defaults不匹配的两种情况会报错</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    tf.io.decode_csv(<span class="string">",,,,,,"</span>, record_defaults=record_defaults)</span><br><span class="line"><span class="keyword">except</span> tf.errors.InvalidArgumentError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    tf.io.decode_csv(<span class="string">"1,2,3,4,5,6,7"</span>, record_defaults=record_defaults)</span><br><span class="line"><span class="keyword">except</span> tf.errors.InvalidArgumentError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>

<p>读取csv文件并进行训练</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_readers = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_csv_line</span><span class="params">(line, n_fields=<span class="number">9</span>)</span>:</span> <span class="comment"># 默认csv文件一行有9个字段</span></span><br><span class="line">    defs = [tf.constant(np.nan)] * n_fields <span class="comment"># 默认数据类型</span></span><br><span class="line">    parsed_fields = tf.io.decode_csv(line, record_defaults=defs)</span><br><span class="line">    x = tf.stack(parsed_fields[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">    y = tf.stack(parsed_fields[<span class="number">-1</span>:])</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_reader_dataset</span><span class="params">(filenames, n_readers, batch_size=<span class="number">32</span>, n_parse_threads=<span class="number">5</span>, shuffle_buffer_size=<span class="number">1000</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 将所有文件转换为dataset</span></span><br><span class="line">    dataset = tf.data.Dataset.list_files(filenames)</span><br><span class="line">    <span class="comment"># 扩展数据量</span></span><br><span class="line">    dataset = dataset.repeat()</span><br><span class="line">    <span class="comment"># interleave 对每一个元素生成一个dataset</span></span><br><span class="line">    dataset = dataset.interleave(</span><br><span class="line">        <span class="keyword">lambda</span> filename: tf.data.TextLineDataset(filename).skip(<span class="number">1</span>),</span><br><span class="line">        cycle_length=n_readers</span><br><span class="line">    )</span><br><span class="line">    dataset.shuffle(shuffle_buffer_size)  <span class="comment"># 打乱顺序</span></span><br><span class="line">    dataset = dataset.map(parse_csv_line, num_parallel_calls=n_parse_threads)</span><br><span class="line">    dataset = dataset.batch(batch_size=batch_size)</span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">train_set = csv_reader_dataset(train_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line">valid_set = csv_reader_dataset(valid_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line">test_set = csv_reader_dataset(test_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义model 进行fit</span></span><br><span class="line">model = keras.models.Sequential(</span><br><span class="line">    [</span><br><span class="line">        keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>, input_shape=[<span class="number">8</span>]),</span><br><span class="line">        keras.layers.Dense(<span class="number">1</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">model.compile(loss=<span class="string">"mse"</span>, optimizer=<span class="string">"SGD"</span>)</span><br><span class="line">callbacks = [keras.callbacks.EarlyStopping(patience=<span class="number">5</span>, min_delta=<span class="number">1e-2</span>)]</span><br><span class="line">history = model.fit(train_set,</span><br><span class="line">                    validation_data=valid_set,</span><br><span class="line">                    steps_per_epoch=<span class="number">11160</span> // batch_size,</span><br><span class="line">                    validation_steps=<span class="number">3870</span> // batch_size,</span><br><span class="line">                    epochs=<span class="number">100</span>,</span><br><span class="line">                    callbacks=callbacks</span><br><span class="line">                    )</span><br><span class="line">model.evaluate(test_set, steps=<span class="number">5160</span> // batch_size)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Dataset读取tfrecord文件"><a href="#Dataset读取tfrecord文件" class="headerlink" title="Dataset读取tfrecord文件"></a>Dataset读取tfrecord文件</h2><ul>
<li><p>api的基本使用</p>
<blockquote>
<p>tf.train.FloatList,tf.train.Int64List,tf.train.BytesList</p>
<p>tf.train.Feature,tf.train.Features,tf.train.Example</p>
<p>example.SerializeToString</p>
<p>tf.io.ParaseSingleExample</p>
<p>tf.io.VarLenFeature,tf.io.FixedLenFeature</p>
<p>tf.data.TFRecordDataset,tf.io.TFRecordOptions</p>
</blockquote>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment"># tfrecord是一个格式</span></span><br><span class="line">    <span class="comment"># -&gt; tf.train.Example</span></span><br><span class="line"><span class="comment">#   -&gt; tf.train.Feature -&gt; &#123;"key":tf.train.Feature&#125;</span></span><br><span class="line">    <span class="comment">#      -&gt; tf.train.Feature -&gt; tf.train.ByteList?FloatList/Int64List</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个字符串数组</span></span><br><span class="line">favotite_books = [name.encode(<span class="string">"utf-8"</span>) <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">"meachine learing"</span>, <span class="string">"cc150"</span>]]</span><br><span class="line">    <span class="comment"># 转为tf的BytesList类型</span></span><br><span class="line">    favotite_books_bytelist = tf.train.BytesList(value=favotite_books)</span><br><span class="line">    print(favotite_books_bytelist)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个浮点数数组并转为FloatList类型</span></span><br><span class="line">    hours_floatlist = tf.train.FloatList(value=[<span class="number">15.5</span>, <span class="number">9.5</span>])</span><br><span class="line">    print(hours_floatlist)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个Int64List类型的数组并</span></span><br><span class="line">age_int64list = tf.train.Int64List(value=[<span class="number">15</span>])</span><br><span class="line">    print(age_int64list)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个Features,其中里面包括多个feature</span></span><br><span class="line">features = tf.train.Features(</span><br><span class="line">        feature=&#123;</span><br><span class="line">            <span class="string">"favorite_books"</span>: tf.train.Feature(bytes_list=favotite_books_bytelist),</span><br><span class="line">            <span class="string">"hours"</span>: tf.train.Feature(float_list=hours_floatlist),</span><br><span class="line">        <span class="string">"age"</span>: tf.train.Feature(int64_list=age_int64list)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    print(features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个样本</span></span><br><span class="line">    example = tf.train.Example(features=features)</span><br><span class="line">    print(example)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将样本数据序列化，节省空间</span></span><br><span class="line">    serialized_example = example.SerializeToString()</span><br><span class="line">    print(serialized_example)</span><br><span class="line">    </span><br><span class="line">    output_dir = <span class="string">"tfrecord_basic"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.mkdir(output_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常数据持久化</span></span><br><span class="line">    filename = <span class="string">"test.tfrecords"</span></span><br><span class="line">    filename_fullpath = os.path.join(output_dir, filename)</span><br><span class="line">    <span class="keyword">with</span> tf.io.TFRecordWriter(filename_fullpath) <span class="keyword">as</span> writer:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        writer.write(serialized_example)</span><br><span class="line">    <span class="comment"># 数据压缩持久化</span></span><br><span class="line">    filename_fullpath_zip = os.path.join(output_dir, filename) + <span class="string">".zip"</span></span><br><span class="line">    options = tf.io.TFRecordOptions(compression_type=<span class="string">"GZIP"</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.io.TFRecordWriter(filename_fullpath_zip, options) <span class="keyword">as</span> writer:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            writer.write(serialized_example)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个TFRecordDataset解析数据</span></span><br><span class="line">dataset = tf.data.TFRecordDataset解析数据([filename_fullpath])</span><br><span class="line">    <span class="comment"># 创建一个TFRecordDataset解析压缩数据</span></span><br><span class="line">    dataset_zip = tf.data.TFRecordDataset([filename_fullpath_zip], compression_type=<span class="string">"GZIP"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> serialized_example_tensor <span class="keyword">in</span> dataset:</span><br><span class="line">        print(serialized_example_tensor)</span><br><span class="line">    <span class="comment"># 要声明要解析的数据格式</span></span><br><span class="line">expected_features = &#123;</span><br><span class="line">        <span class="string">"favorite_books"</span>: tf.io.VarLenFeature(dtype=tf.string),</span><br><span class="line">        <span class="string">"hours"</span>: tf.io.VarLenFeature(dtype=tf.float32),</span><br><span class="line">        <span class="string">"age"</span>: tf.io.FixedLenFeature([], dtype=tf.int64)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 解析tfrecord单个example的feature</span></span><br><span class="line">    <span class="keyword">for</span> serialized_example_tensor <span class="keyword">in</span> dataset:</span><br><span class="line">        example = tf.io.parse_single_example(serialized_example_tensor, expected_features)</span><br><span class="line">        books = tf.sparse.to_dense(example[<span class="string">'favorite_books'</span>], default_value=<span class="string">b""</span>)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">            print(book.numpy().decode(<span class="string">"utf-8"</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> serialized_example_tensor <span class="keyword">in</span> dataset_zip:</span><br><span class="line">        example = tf.io.parse_single_example(serialized_example_tensor, expected_features)</span><br><span class="line">        books = tf.sparse.to_dense(example[<span class="string">'favorite_books'</span>], default_value=<span class="string">b""</span>)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">            print(book.numpy().decode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>将现有的数据集转为tfrecord文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">source_dir = <span class="string">"./generate_csv"</span></span><br><span class="line">filenames = os.listdir(source_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_filename_by_prefix</span><span class="params">(source_dir, prefix_name)</span>:</span></span><br><span class="line">    all_files = os.listdir(source_dir)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> all_files:</span><br><span class="line">        <span class="keyword">if</span> filename.startswith(prefix_name):</span><br><span class="line">            results.append(os.path.join(source_dir, filename))</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_filenames = get_filename_by_prefix(source_dir, <span class="string">"train"</span>)</span><br><span class="line">valid_filenames = get_filename_by_prefix(source_dir, <span class="string">"valid"</span>)</span><br><span class="line">test_filenames = get_filename_by_prefix(source_dir, <span class="string">"test"</span>)</span><br><span class="line">pprint(train_filenames)</span><br><span class="line">pprint(valid_filenames)</span><br><span class="line">pprint(test_filenames)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_csv_line</span><span class="params">(line, n_fields=<span class="number">9</span>)</span>:</span>  <span class="comment"># 默认csv文件一行有9个字段</span></span><br><span class="line">    defs = [tf.constant(np.nan)] * n_fields  <span class="comment"># 默认数据类型</span></span><br><span class="line">    parsed_fields = tf.io.decode_csv(line, record_defaults=defs)</span><br><span class="line">    x = tf.stack(parsed_fields[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">    y = tf.stack(parsed_fields[<span class="number">-1</span>:])</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_reader_dataset</span><span class="params">(filenames, n_readers, batch_size=<span class="number">32</span>, n_parse_threads=<span class="number">5</span>, shuffle_buffer_size=<span class="number">1000</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 将所有文件转换为dataset</span></span><br><span class="line">    dataset = tf.data.Dataset.list_files(filenames)</span><br><span class="line">    <span class="comment"># 扩展数据量</span></span><br><span class="line">    dataset = dataset.repeat()</span><br><span class="line">    <span class="comment"># interleave 对每一个元素生成一个dataset</span></span><br><span class="line">    dataset = dataset.interleave(</span><br><span class="line">        <span class="keyword">lambda</span> filename: tf.data.TextLineDataset(filename).skip(<span class="number">1</span>),</span><br><span class="line">        cycle_length=n_readers</span><br><span class="line">    )</span><br><span class="line">    dataset.shuffle(shuffle_buffer_size)  <span class="comment"># 打乱顺序</span></span><br><span class="line">    dataset = dataset.map(parse_csv_line, num_parallel_calls=n_parse_threads)</span><br><span class="line">    dataset = dataset.batch(batch_size=batch_size)</span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">n_readers = <span class="number">4</span></span><br><span class="line">train_set = csv_reader_dataset(train_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line">valid_set = csv_reader_dataset(valid_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line">test_set = csv_reader_dataset(test_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize_example</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""Convert x,y to tf.train.Example and serialize"""</span></span><br><span class="line">    input_features = tf.train.FloatList(value=x)</span><br><span class="line">    label = tf.train.FloatList(value=y)</span><br><span class="line">    features = tf.train.Features(</span><br><span class="line">        feature=&#123;</span><br><span class="line">            <span class="string">"input_features"</span>: tf.train.Feature(float_list=input_features),</span><br><span class="line">            <span class="string">"label"</span>: tf.train.Feature(float_list=label)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    example = tf.train.Example(features=features)</span><br><span class="line">    <span class="keyword">return</span> example.SerializeToString()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_dataset_to_tfrecord</span><span class="params">(base_filename, dataset, n_shards, steps_per_shard, compression_type=None)</span>:</span></span><br><span class="line">    options = tf.io.TFRecordOptions(compression_type=compression_type)</span><br><span class="line">    all_filenames = []</span><br><span class="line">    <span class="keyword">for</span> shard_id <span class="keyword">in</span> range(n_shards):</span><br><span class="line">        filename_fullpath = <span class="string">"&#123;&#125;_&#123;:05d&#125;-of-&#123;:05d&#125;"</span>.format(base_filename, shard_id, n_shards)</span><br><span class="line">        <span class="keyword">with</span> tf.io.TFRecordWriter(filename_fullpath, options) <span class="keyword">as</span> writer:</span><br><span class="line">            <span class="keyword">for</span> x_batch, y_batch <span class="keyword">in</span> dataset.take(steps_per_shard):</span><br><span class="line">                <span class="keyword">for</span> x_example, y_example <span class="keyword">in</span> zip(x_batch, y_batch):</span><br><span class="line">                    writer.write(serialize_example(x_example.numpy(), y_example.numpy()))</span><br><span class="line">        all_filenames.append(filename_fullpath)</span><br><span class="line">    <span class="keyword">return</span> all_filenames</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n_shards = <span class="number">20</span></span><br><span class="line">train_steps_per_shard = <span class="number">11610</span> // batch_size // n_shards</span><br><span class="line">valid_steps_per_shard = <span class="number">3880</span> // batch_size // n_shards</span><br><span class="line">test_steps_per_shard = <span class="number">5170</span> // batch_size // n_shards</span><br><span class="line"></span><br><span class="line">output_dir = <span class="string">"generate_tfrecord"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">    os.mkdir(output_dir)</span><br><span class="line"></span><br><span class="line">train_basename = os.path.join(output_dir, <span class="string">"train"</span>)</span><br><span class="line">valid_basename = os.path.join(output_dir, <span class="string">"valid"</span>)</span><br><span class="line">test_basename = os.path.join(output_dir, <span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">train_tfrecord_filenames = csv_dataset_to_tfrecord(train_basename, train_set, n_shards, train_steps_per_shard, <span class="literal">None</span>)</span><br><span class="line">valid_tfrecord_filenames = csv_dataset_to_tfrecord(valid_basename, valid_set, n_shards, valid_steps_per_shard, <span class="literal">None</span>)</span><br><span class="line">test_tfrecord_filenames = csv_dataset_to_tfrecord(test_basename, test_set, n_shards, test_steps_per_shard, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用tfrecord文件进行训练</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">expected_features = &#123;</span><br><span class="line">    <span class="string">"input_features"</span>: tf.io.FixedLenFeature([<span class="number">8</span>], dtype=tf.float32),</span><br><span class="line">    <span class="string">"label"</span>: tf.io.FixedLenFeature([<span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_example</span><span class="params">(serialized_example)</span>:</span></span><br><span class="line">    example = tf.io.parse_single_example(serialize_example, expected_features)</span><br><span class="line">    <span class="keyword">return</span> example[<span class="string">'input_features'</span>], example[<span class="string">'label'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tfrecord_reader_dataset</span><span class="params">(filenames, n_readers, batch_size=<span class="number">32</span>, n_parse_threads=<span class="number">5</span>, shuffle_buffer_size=<span class="number">1000</span>)</span>:</span></span><br><span class="line">    dataset = tf.data.Dataset.list_files(filenames)</span><br><span class="line">    dataset = dataset.repeat()</span><br><span class="line">    <span class="comment"># interleave 对每一个元素生成一个dataset</span></span><br><span class="line">    dataset = dataset.interleave(</span><br><span class="line">        <span class="keyword">lambda</span> filename: tf.data.TFRecordDataset(filename, compression_type=<span class="string">"GZIP"</span>),</span><br><span class="line">        cycle_length=n_readers</span><br><span class="line">    )</span><br><span class="line">    dataset.shuffle(shuffle_buffer_size)  <span class="comment"># 打乱顺序</span></span><br><span class="line">    dataset = dataset.map(parse_example, num_parallel_calls=n_parse_threads)</span><br><span class="line">    dataset = dataset.batch(batch_size=batch_size)</span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">n_readers = <span class="number">5</span></span><br><span class="line">train_set = tfrecord_reader_dataset(train_tfrecord_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line">valid_set = tfrecord_reader_dataset(valid_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line">test_set = tfrecord_reader_dataset(test_filenames, n_readers=n_readers, batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义model 进行fit</span></span><br><span class="line">model = keras.models.Sequential(</span><br><span class="line">    [</span><br><span class="line">        keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>, input_shape=[<span class="number">8</span>]),</span><br><span class="line">        keras.layers.Dense(<span class="number">1</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">model.compile(loss=<span class="string">"mse"</span>, optimizer=<span class="string">"SGD"</span>)</span><br><span class="line">callbacks = [keras.callbacks.EarlyStopping(patience=<span class="number">5</span>, min_delta=<span class="number">1e-2</span>)]</span><br><span class="line">history = model.fit(train_set,</span><br><span class="line">                    validation_data=valid_set,</span><br><span class="line">                    steps_per_epoch=<span class="number">11160</span> // batch_size,</span><br><span class="line">                    validation_steps=<span class="number">3870</span> // batch_size,</span><br><span class="line">                    epochs=<span class="number">100</span>,</span><br><span class="line">                    callbacks=callbacks</span><br><span class="line">                    )</span><br><span class="line">model.evaluate(test_set, steps=<span class="number">5160</span> // batch_size)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>TensorFlow系列教程</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>李宏毅深度学习笔记第2节-GradientDescent</title>
    <url>/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC2%E8%8A%82-GradientDescent/</url>
    <content><![CDATA[<p>​    <img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC2%E8%8A%82-GradientDescent/bg.jpg" alt="bg"></p>
<a id="more"></a>

<h1 id="回归的应用"><a href="#回归的应用" class="headerlink" title="回归的应用"></a>回归的应用</h1>]]></content>
      <categories>
        <category>机器学习</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>回归</tag>
      </tags>
  </entry>
  <entry>
    <title>李宏毅深度学习笔记第1节-Regression</title>
    <url>/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/</url>
    <content><![CDATA[<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/bg.jpg" alt="bg">    </p>
<a id="more"></a>

<h1 id="回归的应用"><a href="#回归的应用" class="headerlink" title="回归的应用"></a>回归的应用</h1><p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209105303305.png" alt="image-20200209105303305"></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="第一步-Select-Model"><a href="#第一步-Select-Model" class="headerlink" title="第一步-Select Model"></a>第一步-Select Model</h2><p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209105753330.png" alt="image-20200209105753330"></p>
<p>选定好了model之后，就有了<code>function set</code>。<code>w</code>和<code>b</code>可以是任意值。下图是一个线性model。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209110146026.png" alt="image-20200209110146026"></p>
<h2 id="第二部-Goodness-of-Function"><a href="#第二部-Goodness-of-Function" class="headerlink" title="第二部-Goodness of Function"></a>第二部-Goodness of Function</h2><ul>
<li>获取训练集</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209110654055.png" alt="image-20200209110654055"></p>
<ul>
<li><p>定义function set中function的好坏</p>
<p>Loss Function即为损失函数，入参数function set中的function，输出的是function的好坏。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209111146955.png" alt="image-20200209111146955"></p>
</li>
</ul>
<ul>
<li><p>可以通过热力图来可视化所有的wb组合产生的function set的好坏。颜色越蓝表示数值越小也即是函数越好，颜色越红表示数值越大也就是函数越差。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209111552307.png" alt="image-20200209111552307"></p>
</li>
</ul>
<h2 id="第三步-Best-Function"><a href="#第三步-Best-Function" class="headerlink" title="第三步-Best Function"></a>第三步-Best Function</h2><ul>
<li>在所有function的损失函数中损失最小的那个function就是best function。然后将f展开进行公示推导。</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209113408827.png" alt="image-20200209113408827"></p>
<ul>
<li><p>通过Gradient Descent求解最优的wb</p>
<p>只要是f是可以微分的，那么就可以通过梯度下降实现求解。</p>
<ul>
<li><p>对一个变量进行梯度下降求解</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209120116257.png" alt="image-20200209120116257"></p>
</li>
<li><p>对多个变量进行梯度下降求解</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209120355182.png" alt="image-20200209120355182"></p>
</li>
</ul>
</li>
</ul>
<p>如果损失函数是非凸函数，在梯度下降时候，有可能会因为初始值的选择落在局部最优点。但是如果是线性回归的话，那么损失函函数一定是凸函数，换言之，只有一个全局最优点，没有局部最优点。可以见下图的右边部分。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209120802990.png" alt="image-20200209120802990"></p>
<h2 id="第四步-Error"><a href="#第四步-Error" class="headerlink" title="第四步-Error"></a>第四步-Error</h2><p>损失函数的误差大小随着Model的阶数升高，训练集error降低，测试集error升高。会出现过拟合现象。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209135956154.png" alt="image-20200209135956154"></p>
<blockquote>
<p>要选择一个最适合的model</p>
</blockquote>
<h1 id="Model的选择"><a href="#Model的选择" class="headerlink" title="Model的选择"></a>Model的选择</h1><p>在实际应用中，会遇到在function set选择的function在测试集上都得到不理想结果。以下图为例，可以看到数据受到物种因素的影响很大，所以要重新设计model。针对不同的物种进行拟合。</p>
<p> <img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209140540012.png" alt="image-20200209140540012"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209140848070.png" alt="image-20200209140848070"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209141023137.png" alt="image-20200209141023137"></p>
<h2 id="解决过拟合办法"><a href="#解决过拟合办法" class="headerlink" title="解决过拟合办法"></a>解决过拟合办法</h2><ul>
<li>添加正则惩罚项</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209141724371.png" alt="image-20200209141724371"></p>
<p>加入红色框中的正则项，就是在求解最优参数时候尽可能的使得w参数小。w变小后，会对输入的变化不敏感。因为输入的变化如果是a，输出的变化就是aw。w是一个很小的数，所以function set选出来的function是比较平滑的。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC1%E8%8A%82-Regression/image-20200209142453987.png" alt="image-20200209142453987"></p>
<p>在Training上，$\lambda$越大误差越大，说明$\lambda$很小时候，主要是损失函数的前半部分占主导作用，导致过拟合。当$\lambda$变大时候，损失函数的右半部分占主导作用，使得w变小，阻止了原本过拟合时w过大的情况。但是误差会变大。</p>
<blockquote>
<p>在做正则惩罚的时候是没有必要对b进行惩罚的。因为function的平滑程度是由w决定的，和b是没有关系的。</p>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>回归</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习/李宏毅深度学习笔记/回归</title>
    <url>/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/bg.jpg" alt="bg"></p>
<a id="more"></a>

<h1 id="回归的应用"><a href="#回归的应用" class="headerlink" title="回归的应用"></a>回归的应用</h1><p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209105303305.png" alt="image-20200209105303305"></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="第一步-Select-Model"><a href="#第一步-Select-Model" class="headerlink" title="第一步-Select Model"></a>第一步-Select Model</h2><p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209105753330.png" alt="image-20200209105753330"></p>
<p>选定好了model之后，就有了<code>function set</code>。<code>w</code>和<code>b</code>可以是任意值。下图是一个线性model。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209110146026.png" alt="image-20200209110146026"></p>
<h2 id="第二部-Goodness-of-Function"><a href="#第二部-Goodness-of-Function" class="headerlink" title="第二部-Goodness of Function"></a>第二部-Goodness of Function</h2><ul>
<li>获取训练集</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209110654055.png" alt="image-20200209110654055"></p>
<ul>
<li><p>定义function set中function的好坏</p>
<p>Loss Function即为损失函数，入参数function set中的function，输出的是function的好坏。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209111146955.png" alt="image-20200209111146955"></p>
</li>
</ul>
<ul>
<li><p>可以通过热力图来可视化所有的wb组合产生的function set的好坏。颜色越蓝表示数值越小也即是函数越好，颜色越红表示数值越大也就是函数越差。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209111552307.png" alt="image-20200209111552307"></p>
</li>
</ul>
<h2 id="第三步-Best-Function"><a href="#第三步-Best-Function" class="headerlink" title="第三步-Best Function"></a>第三步-Best Function</h2><ul>
<li>在所有function的损失函数中损失最小的那个function就是best function。然后将f展开进行公示推导。</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209113408827.png" alt="image-20200209113408827"></p>
<ul>
<li><p>通过Gradient Descent求解最优的wb</p>
<p>只要是f是可以微分的，那么就可以通过梯度下降实现求解。</p>
<ul>
<li><p>对一个变量进行梯度下降求解</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209120116257.png" alt="image-20200209120116257"></p>
</li>
<li><p>对多个变量进行梯度下降求解</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209120355182.png" alt="image-20200209120355182"></p>
</li>
</ul>
</li>
</ul>
<p>如果损失函数是非凸函数，在梯度下降时候，有可能会因为初始值的选择落在局部最优点。但是如果是线性回归的话，那么损失函函数一定是凸函数，换言之，只有一个全局最优点，没有局部最优点。可以见下图的右边部分。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209120802990.png" alt="image-20200209120802990"></p>
<h2 id="第四步-Error"><a href="#第四步-Error" class="headerlink" title="第四步-Error"></a>第四步-Error</h2><p>损失函数的误差大小随着Model的阶数升高，训练集error降低，测试集error升高。会出现过拟合现象。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209135956154.png" alt="image-20200209135956154"></p>
<blockquote>
<p>要选择一个最适合的model</p>
</blockquote>
<h1 id="Model的选择"><a href="#Model的选择" class="headerlink" title="Model的选择"></a>Model的选择</h1><p>在实际应用中，会遇到在function set选择的function在测试集上都得到不理想结果。以下图为例，可以看到数据受到物种因素的影响很大，所以要重新设计model。针对不同的物种进行拟合。</p>
<p> <img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209140540012.png" alt="image-20200209140540012"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209140848070.png" alt="image-20200209140848070"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209141023137.png" alt="image-20200209141023137"></p>
<h2 id="解决过拟合办法"><a href="#解决过拟合办法" class="headerlink" title="解决过拟合办法"></a>解决过拟合办法</h2><ul>
<li>添加正则惩罚项</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209141724371.png" alt="image-20200209141724371"></p>
<p>加入红色框中的正则项，就是在求解最优参数时候尽可能的使得w参数小。w变小后，会对输入的变化不敏感。因为输入的变化如果是a，输出的变化就是aw。w是一个很小的数，所以function set选出来的function是比较平滑的。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%9E%E5%BD%92/image-20200209142453987.png" alt="image-20200209142453987"></p>
<p>在Training上，\lambda越大误差越大，说明\lambda很小时候，主要是损失函数的前半部分占主导作用，导致过拟合。当\lambda变大时候，损失函数的右半部分占主导作用，使得w变小，阻止了原本过拟合时w过大的情况。但是误差会变大。</p>
<blockquote>
<p>在做正则惩罚的时候是没有必要对b进行惩罚的。因为function的平滑程度是由w决定的，和b是没有关系的。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Tensorflow系列教程2-Keras实战</title>
    <url>/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/bg.jpg" alt> </p>
<a id="more"></a>

<h1 id="Tensorflow系列教程2-Keras实战"><a href="#Tensorflow系列教程2-Keras实战" class="headerlink" title="Tensorflow系列教程2-Keras实战"></a>Tensorflow系列教程2-Keras实战</h1><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><h3 id="keras简介"><a href="#keras简介" class="headerlink" title="keras简介"></a>keras简介</h3><ul>
<li><p>keras的自身特点</p>
<ul>
<li>基于python的高级神经网络的API，不是一个完整的库</li>
<li>Francois Chollet于2014-2015年编写Keras</li>
<li>以Tensorflow、CNTK或者Theano为后端运行，keras必须有后端才能运行<ul>
<li>后端可以切换，现在多用于tensorflow</li>
</ul>
</li>
<li>极方便于快速实验，帮助用户以最少的时间验证自己的想法</li>
</ul>
</li>
<li><p>Tensorflow-keras简介</p>
<ul>
<li>Tensorflow对keras API规范的实现</li>
<li>相对于以tensorflow为后端的keras，TensorFlow-keras于Tensorflow结合更加紧密</li>
<li>实现在tf.keras空间下</li>
</ul>
</li>
<li><p>Tf-keras与Keras联系</p>
<ul>
<li>基于同一套API<ul>
<li>keras程序可以通过导入方式轻松转为tf.keras程序</li>
<li>反之可能不成立，因此tf.keras有其他特性</li>
</ul>
</li>
<li>相同的Json和HDF5模型序列化格式和语义</li>
</ul>
</li>
<li><p>Tf-keras与Keras区别</p>
<ul>
<li>tf.keras全面支持eager mode<ul>
<li>只是使用keras.Sequential和keras.Model时没有影响</li>
<li>自定义Model内部运算逻辑时候会有影响<ul>
<li>tf底层API可以使用keras的model.fit等抽象</li>
<li>适用于研究人员</li>
</ul>
</li>
<li>tf.keras支持基于tf.data的模型训练</li>
<li>tf.keras支持TPU训练</li>
<li>tf.keras支持tf.distribution中的分布式策略</li>
<li>其他特性<ul>
<li>tf.keras可以与tensorflow中的estimator集成</li>
<li>tf.keras可以保存为SavedModel</li>
</ul>
</li>
</ul>
</li>
<li>如何选择<ul>
<li>如果想使用tf.keras的任何一特性，那么选tf.keras</li>
<li>如果后端互换性很重要，那么选择keras</li>
<li>如果都不重要，随便选择即可</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="分类问题，回归问题、目标函数"><a href="#分类问题，回归问题、目标函数" class="headerlink" title="分类问题，回归问题、目标函数"></a>分类问题，回归问题、目标函数</h3><ul>
<li><p>分类问题预测的是类别，模型输出的是概率分布</p>
<ul>
<li>三分类问题的输出例子：[0.2,0.7,0.1]</li>
</ul>
</li>
<li><p>回归问题预测的是值，模型的输出是一个实数值</p>
</li>
<li><p>为什么需要目标函数</p>
<ul>
<li>参数是逐步调整的</li>
<li>目标函数真可以衡量模型的好坏</li>
</ul>
</li>
<li><p>分类问题的目标函数</p>
<ul>
<li><p>需要衡量目标类别和当前预测的差距</p>
<ul>
<li>三分类问题的输出例子：[0.2,0.7,0.1]</li>
<li>三分类真是类别：2-&gt;one_hot-&gt;[0,0,1]</li>
<li>one-hot编码，把正整数变成向量的表达<ul>
<li>生成一个长度不小于正整数的向量，只有正整数的位置处为1，其余部分为0</li>
</ul>
</li>
</ul>
</li>
<li><p>平方差损失</p>
<p>$\frac{1}{n}\sum\frac{1}{2}(y-Model(x))^2$</p>
</li>
<li><p>交叉熵损失</p>
<p>$\frac{1}{n}\sum y\ln(Model(x))$</p>
</li>
</ul>
</li>
<li><p>回归问题的目标函数</p>
<ul>
<li><p>预测值与真实值的差距</p>
</li>
<li><p>平方差损失</p>
<p>$\frac{1}{n}\sum\frac{1}{2}(y-Model(x))^2$</p>
</li>
<li><p>绝对值损失</p>
<p>$\frac{1}{n}\sum|y-Model(x)|$</p>
</li>
</ul>
</li>
</ul>
<h3 id="激活函数、批归一化、Dropout"><a href="#激活函数、批归一化、Dropout" class="headerlink" title="激活函数、批归一化、Dropout"></a>激活函数、批归一化、Dropout</h3><ul>
<li>激活函数</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200214134919467.png" alt="image-20200214134919467"></p>
<ul>
<li><p>归一化</p>
<ul>
<li><p>z-score归一化</p>
<p>就是将样本数据变成均值为0方差为1的数据形式</p>
</li>
<li><p>min-max归一化</p>
<p>(元素-最小值)/(最大值-最小值)</p>
</li>
</ul>
</li>
<li><p>批归一化</p>
<ul>
<li>在每一层的激活值上都做归一化，使得网络的训练效果更好</li>
</ul>
</li>
<li><p>归一化为什么会有效</p>
<ul>
<li>如下图，$\theta1$与$\theta2$的数据范围是不一样的，数据等高线(目标函数值)看起来像是椭圆，椭圆求法向量时候不是指向圆心，导致训练的规矩比较曲折。</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200214135800129.png" alt="image-20200214135800129"></p>
</li>
<li><p>dropout</p>
<p>在训练集上效果好，在测试集上效果不好。是因为模型参数过多，导致模型过拟合，记住了样本，泛化能力不强。</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200214135927142.png" alt="image-20200214135927142"></p>
</li>
</ul>
<h3 id="Wide-amp-Deep模型"><a href="#Wide-amp-Deep模型" class="headerlink" title="Wide &amp; Deep模型"></a>Wide &amp; Deep模型</h3><ul>
<li><p>简介</p>
<ul>
<li>2016年发布，用于分类问题和回归问题</li>
<li>应用到了Google Play的应用推荐上</li>
</ul>
</li>
<li><p>特征</p>
<ul>
<li><p>稀疏特征</p>
<ul>
<li><p>离散值特征</p>
<ul>
<li><p>一个x离散值特征用one-hot编码就是稀疏特征</p>
</li>
<li><p>举例：专业={计算机，数学，其他}</p>
<p>​            词表={人工智能，你，我，他，….}</p>
</li>
</ul>
</li>
<li><p>叉乘</p>
<ul>
<li><p>两个离散值特征的组合</p>
<p>{(计算机，你)，(计算机，我)，(计算机,人工智能)}</p>
</li>
<li><p>叉乘之后</p>
<ul>
<li>稀疏特征做叉乘获取共现信息</li>
<li>实现记忆效果</li>
</ul>
</li>
</ul>
</li>
<li><p>稀疏特征的优缺点</p>
<ul>
<li>优点    <ul>
<li>有效，广泛应用于工业界</li>
</ul>
</li>
<li>缺点<ul>
<li>需要人工设计</li>
<li>可能过拟合，所有特征都叉乘，相当于记住每一个样本</li>
<li>泛化能力差，没出现就不会起效果</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>密集特征</p>
<ul>
<li>向量表达<ul>
<li>词表={人工智能，你，我，他}</li>
<li>他=[0.3.0.2.0.6,n维向量]</li>
</ul>
</li>
<li>Word2Vec工具<ul>
<li>（男-女）距离等于 (国王-王后)的距离</li>
</ul>
</li>
<li>密集特征的优缺点<ul>
<li>优点<ul>
<li>带有语义信息，不同向量之间有相关性</li>
<li>兼容没有出现过的特征组合</li>
<li>更少人工参与</li>
</ul>
</li>
<li>缺点：<ul>
<li>过度泛化，推荐不怎么相关的产品</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>模型结构</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215192712627.png" alt="image-20200215192712627"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215192907210.png" alt="image-20200215192907210"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215193415767.png" alt="image-20200215193415767"></p>
</li>
</ul>
</li>
</ul>
<h3 id="超参数搜索"><a href="#超参数搜索" class="headerlink" title="超参数搜索"></a>超参数搜索</h3><ul>
<li><p>什么是超参数</p>
<ul>
<li>在神经网络有很多训练过程中不变的参数<ul>
<li>网络结构参数：几层，每层宽度，每层激活函数</li>
<li>训练参数：batch_size，学习率，学习衰减算法等</li>
</ul>
</li>
</ul>
</li>
<li><p>为什么要搜索超参数</p>
<ul>
<li>人工去调试耗费人力</li>
</ul>
</li>
<li><p>搜索策略</p>
<ul>
<li><p>网格搜索</p>
<ul>
<li>最优参数不在搜索空间中</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215213416470.png" alt="image-20200215213416470"></p>
</li>
<li><p>随机搜索</p>
<ul>
<li>搜索空间比网格搜索大很多</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215213506344.png" alt="image-20200215213506344"></p>
</li>
<li><p>遗传算法搜索</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215213654324.png" alt="image-20200215213654324"></p>
</li>
<li><p>启发式搜索</p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215213930433.png" alt="image-20200215213930433"></p>
</li>
</ul>
</li>
</ul>
<h2 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h2><h3 id="Keras搭建分类模型"><a href="#Keras搭建分类模型" class="headerlink" title="Keras搭建分类模型"></a>Keras搭建分类模型</h3><ul>
<li>读取数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os, sys, time</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br><span class="line">print(sys.version_info)</span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> mpl, np, pd, sklearn, tf.keras:</span><br><span class="line">    print(module.__name__, module.__version__)</span><br><span class="line"></span><br><span class="line">fashion_mnist = keras.datasets.fashion_mnist</span><br><span class="line">(x_train_all, y_train_all), (x_test, y_test) = fashion_mnist.load_data()</span><br><span class="line">x_valid, x_train = x_train_all[:<span class="number">5000</span>], x_train_all[<span class="number">5000</span>:]</span><br><span class="line">y_valid, y_train = y_train_all[:<span class="number">5000</span>], y_train_all[<span class="number">5000</span>:]</span><br><span class="line"><span class="comment"># 数据归一化</span></span><br><span class="line"><span class="comment"># x_valid = x_valid.astype('float32') / 255</span></span><br><span class="line"><span class="comment"># x_train = x_train.astype('float32') / 255</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_valid = scaler.fit_transform(x_valid.astype(np.float32).reshape(<span class="number">-1</span>, <span class="number">1</span>)).reshape(<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">x_train = scaler.fit_transform(x_train.astype(np.float32).reshape(<span class="number">-1</span>, <span class="number">1</span>)).reshape(<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">print(x_valid.shape, y_valid.shape)</span><br><span class="line">print(x_train.shape, y_train.shape)</span><br><span class="line">print(x_test.shape, y_test.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_single_image</span><span class="params">(ima_arr)</span>:</span></span><br><span class="line">    plt.imshow(ima_arr, cmap=<span class="string">"binary"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_imgs</span><span class="params">(n_rows, n_cols, x_data, y_data, class_names)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(x_data) == len(y_data)</span><br><span class="line">    <span class="keyword">assert</span> n_rows * n_cols &lt; len(x_data)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(n_cols * <span class="number">1.4</span>, n_rows * <span class="number">1.6</span>))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(n_rows):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n_cols):</span><br><span class="line">            index = n_cols * row + col</span><br><span class="line">            plt.subplot(n_rows, n_cols, index + <span class="number">1</span>)</span><br><span class="line">            plt.imshow(x_data[index], cmap=<span class="string">"binary"</span>,</span><br><span class="line">                       interpolation=<span class="string">"nearest"</span>)</span><br><span class="line">            plt.axis(<span class="string">"off"</span>)</span><br><span class="line">            plt.title(class_names[y_data[index]])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class_names = [<span class="string">'T-shrit'</span>, <span class="string">'Trouser'</span>, <span class="string">'Pullover'</span>, <span class="string">'Dress'</span>, <span class="string">'Coat'</span>, <span class="string">'Sandal'</span>, <span class="string">'Shirt'</span>, <span class="string">'Sneaker'</span>, <span class="string">'Bag'</span>, <span class="string">'Ankel boot'</span>]</span><br><span class="line">show_single_image(x_train[<span class="number">0</span>])</span><br><span class="line">show_imgs(<span class="number">3</span>, <span class="number">5</span>, x_train, y_train, class_names)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200213133528926.png" alt="image-20200213133528926"></p>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200213134458326.png" alt="image-20200213134458326"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow.keras <span class="keyword">as</span> keras</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf.keras.models.Sequential()</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Flatten(input_shape=[<span class="number">28</span>, <span class="number">28</span>]))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">300</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">100</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">"softmax"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># model输出不是one_hot编码时候使用sparse_categorical_crossentropy</span></span><br><span class="line"><span class="comment"># model输出是one_hot编码时候使用categorical_crossentropy</span></span><br><span class="line">model.compile(loss=<span class="string">"sparse_categorical_crossentropy"</span>,</span><br><span class="line">              optimizer=<span class="string">"sgd"</span>,</span><br><span class="line">              metrics=[<span class="string">"accuracy"</span>])</span><br><span class="line">print(model.layers)</span><br><span class="line">print(model.summary())</span><br><span class="line"></span><br><span class="line">history = model.fit(x_train, y_train, epochs=<span class="number">10</span>, validation_data=(x_valid, y_valid))</span><br></pre></td></tr></table></figure>

<p>不同的归一化方式结果对比（不同的优化器optimizer也可能对结果是有影响的，比如笔者实验室时候使用adam优化器准确率可以达到91%）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># x_valid = x_valid.astype('float32') / 255</span></span><br><span class="line"><span class="comment"># x_train = x_train.astype('float32') / 255</span></span><br><span class="line">accuracy: 0.8798 - val_loss: 0.3495 - val_accuracy: 0.8732</span><br><span class="line"></span><br><span class="line"><span class="comment"># from sklearn.preprocessing import StandardScaler</span></span><br><span class="line"><span class="comment"># scaler = StandardScaler()</span></span><br><span class="line"><span class="comment"># x_valid = scaler.fit_transform(x_valid.astype(np.float32).reshape(-1, 1)).reshape(-1, 28, 28)</span></span><br><span class="line"><span class="comment"># x_train = scaler.fit_transform(x_train.astype(np.float32).reshape(-1, 1)).reshape(-1, 28, 28)</span></span><br><span class="line">accuracy: 0.9115 - val_loss: 0.3059 - val_accuracy: 0.8880</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curves</span><span class="params">(_history)</span>:</span></span><br><span class="line">    pd.DataFrame(_history.history).plot(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.gca().set_ylim(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">plot_learning_curves(history)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200214103719112.png" alt="image-20200214103719112"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行测试集测试</span></span><br><span class="line">model.evaluate(x_test, y_test)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss: <span class="number">0.1844</span> - accuracy: <span class="number">0.8869</span></span><br></pre></td></tr></table></figure>

<h3 id="Keras回调函数"><a href="#Keras回调函数" class="headerlink" title="Keras回调函数"></a>Keras回调函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tensorboard，earlystopping，ModelCheckPoint</span></span><br><span class="line">logdir = <span class="string">'callbacks'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(logdir):</span><br><span class="line">    os.mkdir(logdir)</span><br><span class="line">output_model_file = os.path.join(logdir, <span class="string">"fashion_mnist_model.h5"</span>)</span><br><span class="line"></span><br><span class="line">callbacks = [</span><br><span class="line">    keras.callbacks.TensorBoard(logdir),</span><br><span class="line">    keras.callbacks.ModelCheckpoint(output_model_file, save_best_only=<span class="literal">True</span>),</span><br><span class="line">    keras.callbacks.EarlyStopping(min_delta=<span class="number">1e-3</span>,</span><br><span class="line">                                  patience=<span class="number">5</span>)</span><br><span class="line">]</span><br><span class="line">history = model.fit(</span><br><span class="line">    x_train, y_train,</span><br><span class="line">    epochs=<span class="number">10</span>,</span><br><span class="line">    validation_data=(x_valid, y_valid),</span><br><span class="line">    callbacks=callbacks</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>可以运行tensorboard</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir&#x3D;callbacks</span><br></pre></td></tr></table></figure>

<h3 id="Keras搭建回归模型"><a href="#Keras搭建回归模型" class="headerlink" title="Keras搭建回归模型"></a>Keras搭建回归模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Sized</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras <span class="keyword">as</span> keras</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">housing: sklearn.utils.Bunch = fetch_california_housing()</span><br><span class="line">print(housing.DESCR)</span><br><span class="line">print(housing.data.shape)</span><br><span class="line">print(housing.target.shape)</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">pprint.pprint(housing.data[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line">pprint.pprint(housing.target[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认3:1划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    housing.data, housing.target, random_state=<span class="number">7</span>, test_size=<span class="number">0.25</span></span><br><span class="line">)</span><br><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(</span><br><span class="line">    x_train, y_train, random_state=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line">print(x_train.shape, y_train.shape)</span><br><span class="line">print(x_test.shape, y_test.shape)</span><br><span class="line">print(x_valid.shape, y_valid.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_train_scaler = scaler.fit_transform(x_train)</span><br><span class="line">x_valid_scaler = scaler.transform(x_valid)</span><br><span class="line">x_test_scaler = scaler.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建模型</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>, input_shape=x_train.shape[<span class="number">1</span>:]))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line">model.compile(loss=<span class="string">"mean_squared_error"</span>,</span><br><span class="line">              optimizer=<span class="string">"sgd"</span>)</span><br><span class="line">callbacks = [</span><br><span class="line">    keras.callbacks.EarlyStopping(</span><br><span class="line">        patience=<span class="number">5</span>, min_delta=<span class="number">1e-3</span></span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line">history = model.fit(x_train_scaler, y_train,</span><br><span class="line">                    validation_data=(x_valid_scaler, y_valid),</span><br><span class="line">                    epochs=<span class="number">100</span>,</span><br><span class="line">                    callbacks=callbacks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curves</span><span class="params">(history)</span>:</span></span><br><span class="line">    pd.DataFrame(history.history).plot(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.gca().set_ylim(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_learning_curves(history)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">test_res = model.evaluate(x_test_scaler, y_test)</span><br><span class="line">print(test_res)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215203640734.png" alt="image-20200215203640734"></p>
<h3 id="Keras搭建深度神经网络"><a href="#Keras搭建深度神经网络" class="headerlink" title="Keras搭建深度神经网络"></a>Keras搭建深度神经网络</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Flatten(input_shape=[<span class="number">28</span>, <span class="number">28</span>]))</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    model.add(keras.layers.Dense(<span class="number">100</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">"softmax"</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215164314893.png" alt="image-20200215164314893"></p>
<ul>
<li><p>前三次迭代没有明显的变化原因：</p>
<ul>
<li>参数众多，训练不充分</li>
<li>梯度消失</li>
</ul>
</li>
<li><p>添加批归一化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    model.add(keras.layers.Dense(<span class="number">100</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">  model.add(keras.layers.BatchNormalization())</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加dropout</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    model.add(keras.layers.Dense(<span class="number">100</span>, activation=<span class="string">"selu"</span>))</span><br><span class="line">    model.add(keras.layers.BatchNormalization())</span><br><span class="line">model.add(keras.layers.AlphaDropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">"softmax"</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>AlphaDropout<ul>
<li>均值和方差不变</li>
<li>激活值的归一化性质不变</li>
<li>一般使用AlphaDropout</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Keras实现wide-amp-deep模型"><a href="#Keras实现wide-amp-deep模型" class="headerlink" title="Keras实现wide&amp;deep模型"></a>Keras实现wide&amp;deep模型</h3><blockquote>
<p>使用：</p>
<p>​    子类API</p>
<p>​    函数式API</p>
<p>​    多输入与多输出</p>
</blockquote>
<ul>
<li>对回归模型的代码通过子类API进行修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WideDeepModel</span><span class="params">(keras.models.Model)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(WideDeepModel, self).__init__()</span><br><span class="line">        <span class="string">"""定义模型的层次"""</span></span><br><span class="line">        self.hidden1_layer = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>)</span><br><span class="line">        self.hidden2_layer = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>)</span><br><span class="line">        self.output_layer = keras.layers.Dense(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, inputs, training=None, mask=None)</span>:</span></span><br><span class="line">        <span class="string">"""完成模型的正向计算"""</span></span><br><span class="line">        hidden1 = self.hidden1_layer(inputs)</span><br><span class="line">        hidden2 = self.hidden2_layer(hidden1)</span><br><span class="line">        concat = keras.layers.concatenate([inputs, hidden2])</span><br><span class="line">        output = self.output_layer(concat)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = WideDeepModel()</span><br><span class="line">model.build(input_shape=(<span class="literal">None</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215205717102.png" alt="image-20200215205717102"></p>
<ul>
<li>对回归模型的代码通过函数式进行修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用函数式API</span></span><br><span class="line">input = keras.layers.Input(shape=x_train.shape[<span class="number">1</span>:])</span><br><span class="line">hidden1 = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">'relu'</span>)(input)</span><br><span class="line">hidden2 = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">'relu'</span>)(hidden1)</span><br><span class="line"></span><br><span class="line">concat = keras.layers.concatenate([input, hidden2])</span><br><span class="line">output = keras.layers.Dense(<span class="number">1</span>)(concat)</span><br><span class="line"></span><br><span class="line">model = keras.models.Model(inputs=[input], outputs=output)</span><br><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215204509528.png" alt="image-20200215204509528"></p>
<ul>
<li><p>多输入方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多输入</span></span><br><span class="line">input_wide = keras.layers.Input(shape=[<span class="number">5</span>])</span><br><span class="line">input_deep = keras.layers.Input(shape=[<span class="number">6</span>])</span><br><span class="line">hidden1 = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>)(input_deep)</span><br><span class="line">hidden2 = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>)(hidden1)</span><br><span class="line">concat = keras.layers.concatenate([input_wide, hidden2])</span><br><span class="line">output = keras.layers.Dense(<span class="number">1</span>)(concat)</span><br><span class="line">model = keras.models.Model(inputs=[input_wide, input_deep],</span><br><span class="line">                           outputs=[output])</span><br><span class="line">x_train_scaler_wide = x_train_scaler[:, : <span class="number">5</span>]</span><br><span class="line">x_train_scaler_deep = x_train_scaler[:, <span class="number">2</span>:]</span><br><span class="line">x_valid_scaler_wide = x_valid_scaler[:, : <span class="number">5</span>]</span><br><span class="line">x_valid_scaler_deep = x_valid_scaler[:, <span class="number">2</span>:]</span><br><span class="line">x_test_scaler_wide = x_test_scaler[:, : <span class="number">5</span>]</span><br><span class="line">x_test_scaler_deep = x_test_scaler[:, <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">model.compile(loss=<span class="string">"mean_squared_error"</span>,</span><br><span class="line">              optimizer=<span class="string">"sgd"</span>)</span><br><span class="line">callbacks = [</span><br><span class="line">    keras.callbacks.EarlyStopping(</span><br><span class="line">        patience=<span class="number">5</span>, min_delta=<span class="number">1e-3</span></span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line">history = model.fit([x_train_scaler_wide, x_train_scaler_deep], y_train,</span><br><span class="line">                    validation_data=([x_valid_scaler_wide, x_valid_scaler_deep], 					  y_valid),</span><br><span class="line">                    epochs=<span class="number">100</span>,</span><br><span class="line">                    <span class="comment"># callbacks=callbacks</span></span><br><span class="line">                    )</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215211552014.png" alt="image-20200215211552014"></p>
</li>
<li><p>多输出模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_wide = keras.layers.Input(shape=[<span class="number">5</span>])</span><br><span class="line">input_deep = keras.layers.Input(shape=[<span class="number">6</span>])</span><br><span class="line">hidden1 = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>)(input_deep)</span><br><span class="line">hidden2 = keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>)(hidden1)</span><br><span class="line">concat = keras.layers.concatenate([input_wide, hidden2])</span><br><span class="line">output = keras.layers.Dense(<span class="number">1</span>)(concat)</span><br><span class="line">output2 = keras.layers.Dense(<span class="number">1</span>)(hidden2)</span><br><span class="line"></span><br><span class="line">model = keras.models.Model(inputs=[input_wide, input_deep],</span><br><span class="line">                           outputs=[output, output2])</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%BA%8C%E8%AE%B2TensorFlow-Keras%E5%AE%9E%E6%88%98/image-20200215212622330.png" alt="image-20200215212622330"></p>
</li>
</ul>
<h3 id="Keras与scikit-learn实现超参数搜索"><a href="#Keras与scikit-learn实现超参数搜索" class="headerlink" title="Keras与scikit-learn实现超参数搜索"></a>Keras与scikit-learn实现超参数搜索</h3><ul>
<li><p>使用scikit实现超参数搜索</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Sized</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras <span class="keyword">as</span> keras</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">housing: sklearn.utils.Bunch = fetch_california_housing()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认3:1划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    housing.data, housing.target, random_state=<span class="number">7</span>, test_size=<span class="number">0.25</span></span><br><span class="line">)</span><br><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(</span><br><span class="line">    x_train, y_train, random_state=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_train_scaler = scaler.fit_transform(x_train)</span><br><span class="line">x_valid_scaler = scaler.transform(x_valid)</span><br><span class="line">x_test_scaler = scaler.transform(x_test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机参数搜索</span></span><br><span class="line"><span class="comment"># 1 转化为sklearn的model</span></span><br><span class="line"><span class="comment"># 2 定义参数集合</span></span><br><span class="line"><span class="comment"># 3 搜索参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(hidden_layers=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                layer_size=<span class="number">30</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                lr=<span class="number">3e-3</span>)</span>:</span></span><br><span class="line">    model = keras.models.Sequential()</span><br><span class="line">    model.add(keras.layers.Dense(layer_size, activation=<span class="string">"relu"</span>, input_shape=x_train.shape[<span class="number">1</span>:]))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(hidden_layers - <span class="number">1</span>):</span><br><span class="line">        model.add(keras.layers.Dense(layer_size, activation=<span class="string">"relu"</span>))</span><br><span class="line">    model.add(keras.layers.Dense(<span class="number">1</span>))</span><br><span class="line">    optimizer = keras.optimizers.SGD(lr)</span><br><span class="line">    model.compile(loss=<span class="string">"mse"</span>, optimizer=optimizer)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">callbacks = [</span><br><span class="line">    keras.callbacks.EarlyStopping(</span><br><span class="line">        patience=<span class="number">5</span>, min_delta=<span class="number">1e-3</span></span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 将模型转化为sklearn形式</span></span><br><span class="line">sklearn_model = keras.wrappers.scikit_learn.KerasRegressor(build_model)</span><br><span class="line"><span class="comment"># history = sklearn_model.fit(x_train_scaler,</span></span><br><span class="line"><span class="comment">#                             y_train,</span></span><br><span class="line"><span class="comment">#                             epochs=20,</span></span><br><span class="line"><span class="comment">#                             validation_data=(x_valid_scaler, y_valid),</span></span><br><span class="line"><span class="comment">#                             callbacks=callbacks)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义搜索空间参数集合</span></span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> reciprocal</span><br><span class="line"></span><br><span class="line">param_distribution = &#123;</span><br><span class="line">    <span class="string">"hidden_layers"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">"layer_size"</span>: np.arange(<span class="number">1</span>, <span class="number">100</span>),</span><br><span class="line">    <span class="string">"lr"</span>: reciprocal(<span class="number">1e-4</span>, <span class="number">1e-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索参数</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"></span><br><span class="line">random_search_cv = RandomizedSearchCV(sklearn_model,</span><br><span class="line">                                      param_distribution,</span><br><span class="line">                                      n_iter=<span class="number">10</span>, n_jobs=<span class="number">1</span>)</span><br><span class="line">random_search_cv.fit(x_train_scaler,</span><br><span class="line">                     y_train,</span><br><span class="line">                     epochs=<span class="number">20</span>,</span><br><span class="line">                     validation_data=(x_valid_scaler, y_valid),</span><br><span class="line">                     callbacks=callbacks)</span><br><span class="line">print(random_search_cv.best_params_)</span><br><span class="line">print(random_search_cv.best_score_)</span><br><span class="line">print(random_search_cv.best_estimator_)</span><br><span class="line">model = random_search_cv.best_estimator_.model</span><br><span class="line">test_res = model.evaluate(x_test_scaler, y_test)</span><br><span class="line">print(test_res)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">'hidden_layers'</span>: 4&#125;</span><br><span class="line">-0.6898686443393751</span><br><span class="line">&lt;tensorflow.python.keras.wrappers.scikit_learn.KerasRegressor object at 0x00000234F1D52508&gt;</span><br></pre></td></tr></table></figure>





</li>
</ul>
]]></content>
      <categories>
        <category>TensorFlow系列教程</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow系列教程3-Tensorflow基础API</title>
    <url>/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%89%E8%AE%B2Tensorflow%E5%9F%BA%E7%A1%80API/</url>
    <content><![CDATA[<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%89%E8%AE%B2Tensorflow%E5%9F%BA%E7%A1%80API/bg.jpg" alt>   </p>
<a id="more"></a>

<h1 id="Tensorflow系列教程3-Tensorflow基础API"><a href="#Tensorflow系列教程3-Tensorflow基础API" class="headerlink" title="Tensorflow系列教程3-Tensorflow基础API"></a>Tensorflow系列教程3-Tensorflow基础API</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul>
<li><p>tf.constant</p>
<p>常量操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t= tf.constant([[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>],[<span class="number">4.</span>,<span class="number">5.</span>,<span class="number">6.</span>]])</span><br><span class="line">print(t)</span><br><span class="line">print(t[:,<span class="number">1</span>:])<span class="comment">#  第一列之后的数据</span></span><br><span class="line">print(t[:,<span class="number">1</span>]) <span class="comment"># 第二列数据</span></span><br><span class="line">print(t[...,<span class="number">1</span>]) <span class="comment"># 第二列数据</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在1.0中定义的变量是不能直接被打印的，需要配合session run打印。在2.0中是可以直接打印的，是因为eager execution是默认打开的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]], shape=(2, 3), dtype=float32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[2. 3.]</span><br><span class="line"> [5. 6.]], shape=(2, 2), dtype=float32)</span><br><span class="line">tf.Tensor([2. 5.], shape=(2,), dtype=float32)</span><br><span class="line">tf.Tensor([2. 5.], shape=(2,), dtype=float32)</span><br></pre></td></tr></table></figure>

<p>算子操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(t+<span class="number">10</span>)</span><br><span class="line">print(tf.square(t))</span><br><span class="line">print(t @ tf.transpose(t))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[11. 12. 13.]</span><br><span class="line"> [14. 15. 16.]], shape=(2, 3), dtype=float32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[ 1.  4.  9.]</span><br><span class="line"> [16. 25. 36.]], shape=(2, 3), dtype=float32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[14. 32.]</span><br><span class="line"> [32. 77.]], shape=(2, 2), dtype=float32)</span><br></pre></td></tr></table></figure>

<p>与numpy的转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># tf-&gt;numpy</span></span><br><span class="line">print(t.numpy())</span><br><span class="line">print(type(t.numpy()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy-&gt;tf</span></span><br><span class="line">print(np.squre(t))</span><br><span class="line">np_t = np.array([[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>],[<span class="number">4.</span>,<span class="number">5.</span>,<span class="number">6.</span>]])</span><br><span class="line">print(tf.constant(np_t))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]]</span><br><span class="line">&lt;class <span class="string">'numpy.ndarray'</span>&gt;</span><br><span class="line">[[ 1.  4.  9.]</span><br><span class="line"> [16. 25. 36.]]</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]], shape=(2, 3), dtype=float64)</span><br></pre></td></tr></table></figure>

<p>tf的0维数据</p>
<blockquote>
<p>在tf中称之为scalars</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = tf.constant(<span class="number">2.718</span>)</span><br><span class="line">print(t.numpy)</span><br><span class="line">print(t.shape)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2.718</span><br><span class="line">()</span><br></pre></td></tr></table></figure>
</li>
<li><p>tf.string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = tf.constant(<span class="string">"cafe"</span>)</span><br><span class="line">print(t)</span><br><span class="line">print(tf.strings.length(t))</span><br><span class="line">print(tf.strings.length(t,unit=<span class="string">"UTF8_CHAR"</span>))</span><br><span class="line">print(tf.strings.unicode_decode(t,<span class="string">"UTF8"</span>))</span><br><span class="line"></span><br><span class="line">t = tf.constant([<span class="string">"cafe"</span>,<span class="string">"caffee"</span>,<span class="string">"咖啡"</span>])</span><br><span class="line">print(tf.strings.length(t))</span><br><span class="line">print(tf.strings.length(t,unit=<span class="string">"UTF8_CHAR"</span>))</span><br><span class="line">print(tf.strings.unicode_decode(t,<span class="string">"UTF8"</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tf.Tensor(b<span class="string">'cafe'</span>, shape=(), dtype=string)</span><br><span class="line">tf.Tensor(4, shape=(), dtype=int32)</span><br><span class="line">tf.Tensor(4, shape=(), dtype=int32)</span><br><span class="line">tf.Tensor([ 99  97 102 101], shape=(4,), dtype=int32)</span><br><span class="line"></span><br><span class="line">tf.Tensor([4 6 6], shape=(3,), dtype=int32)</span><br><span class="line">tf.Tensor([4 6 2], shape=(3,), dtype=int32)</span><br><span class="line">&lt;tf.RaggedTensor [[99, 97, 102, 101], [99, 97, 102, 102, 101, 101], [21654, 21857]]&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>RaggedTensor是不完整的N维矩阵，如上每一行的数据个数是不一样的，是tf2.0新加的一个功能。</p>
</blockquote>
</li>
<li><p>tf.RaggedTensor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = tf.ragged.constant([[<span class="number">11</span>,<span class="number">12</span>],[<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>],[],[<span class="number">41</span>]])</span><br><span class="line">print(r)</span><br><span class="line">print(r[<span class="number">1</span>])</span><br><span class="line">print(r[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">r2 = tf.ragged.constant([[<span class="number">51</span>,<span class="number">52</span>],[],[<span class="number">71</span>]])</span><br><span class="line">print(tf.concat([r,r2],axis=<span class="number">0</span>))</span><br><span class="line">r3 = tf.ragged.constant([[<span class="number">13</span>,<span class="number">14</span>],[],[<span class="number">71</span>],[<span class="number">99</span>]])</span><br><span class="line">print(tf.concat([r,r3],axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">print(r.to_tensor())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;tf.RaggedTensor [[11, 12], [21, 22, 23], [], [41]]&gt;</span><br><span class="line">tf.Tensor([21 22 23], shape=(3,), dtype=int32)</span><br><span class="line">&lt;tf.RaggedTensor [[21, 22, 23], [], [41]]&gt;</span><br><span class="line">&lt;tf.RaggedTensor [[11, 12], [21, 22, 23], [], [41], [51, 52], [], [71]]&gt;</span><br><span class="line">&lt;tf.RaggedTensor [[11, 12, 13, 14], [21, 22, 23], [71], [41, 99]]&gt;</span><br></pre></td></tr></table></figure>

<p>转为tensor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(r.to_tensor())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tf.Tensor(</span><br><span class="line">[[11 12  0]</span><br><span class="line"> [21 22 23]</span><br><span class="line"> [ 0  0  0]</span><br><span class="line"> [41  0  0]], shape=(4, 3), dtype=int32)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不对其的地方用0填充</p>
</blockquote>
</li>
<li><p>tf.SparseTensor</p>
<blockquote>
<p>大部分是0，只有少数是非0。只要把非0值的大小和位置记录下来就可以。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># indices是要排好序的，否则在执行to_dense()会报错</span><br><span class="line">s &#x3D; tf.SparseTensor(indices &#x3D; [[0,1],[1,0],[2,3]],</span><br><span class="line">                   values&#x3D;[1.,2.,3.],</span><br><span class="line">                   dense_shape&#x3D;[3,4])</span><br><span class="line">print(s)</span><br><span class="line">print(tf.sparse.to_dense(s))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SparseTensor(indices=tf.Tensor(</span><br><span class="line">[[0 1]</span><br><span class="line"> [1 0]</span><br><span class="line"> [2 3]], shape=(3, 2), dtype=int64), values=tf.Tensor([1. 2. 3.], shape=(3,), dtype=float32), dense_shape=tf.Tensor([3 4], shape=(2,), dtype=int64))</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[0. 1. 0. 0.]</span><br><span class="line"> [2. 0. 0. 0.]</span><br><span class="line"> [0. 0. 0. 3.]], shape=(3, 4), dtype=float32)</span><br></pre></td></tr></table></figure>

<p>sparsetensor的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 乘法操作</span></span><br><span class="line">s2 = s * <span class="number">2</span></span><br><span class="line">print(s2)</span><br><span class="line">print(tf.sparse.to_dense(s2))</span><br><span class="line"></span><br><span class="line">s4 = tf.constant([[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">30</span>,<span class="number">40</span>],[<span class="number">50</span>,<span class="number">60</span>],[<span class="number">70</span>,<span class="number">80</span>]],dtype=tf.float32)</span><br><span class="line"><span class="comment"># sparsetensor与densetensor相乘得到densetensor</span></span><br><span class="line">print(tf.sparse.sparse_dense_matmul(s,s4))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法操作</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s3 = s + <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> ex:</span><br><span class="line">    print(ex)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 乘法操作</span></span><br><span class="line">SparseTensor(indices=tf.Tensor(</span><br><span class="line">[[0 1]</span><br><span class="line"> [1 0]</span><br><span class="line"> [2 3]], shape=(3, 2), dtype=int64), values=tf.Tensor([2. 4. 6.], shape=(3,), dtype=float32), dense_shape=tf.Tensor([3 4], shape=(2,), dtype=int64))</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[0. 2. 0. 0.]</span><br><span class="line"> [4. 0. 0. 0.]</span><br><span class="line"> [0. 0. 0. 6.]], shape=(3, 4), dtype=float32)</span><br><span class="line"> </span><br><span class="line"> tf.Tensor(</span><br><span class="line">[[ 30.  40.]</span><br><span class="line"> [ 20.  40.]</span><br><span class="line"> [210. 240.]], shape=(3, 2), dtype=float32)</span><br><span class="line"> <span class="comment"># 加法操作</span></span><br><span class="line"> unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">'SparseTensor'</span> and <span class="string">'int'</span></span><br></pre></td></tr></table></figure>

<p>indices没有排序情况(sparsetensor常见的坑)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s5 = tf.SparseTensor(indices = [[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>]],</span><br><span class="line">                   values=[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>],</span><br><span class="line">                   dense_shape=[<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(s5)</span><br><span class="line">print(tf.sparse.to_dense(s5)) <span class="comment"># 会报错InvalidArgumentError</span></span><br><span class="line"></span><br><span class="line">s6 = tf.sparse.reorder(s5) <span class="comment"># 对s5的indices重新排序</span></span><br><span class="line">print(tf.sparse.to_dense(s6)) <span class="comment"># 不会报错InvalidArgumentError</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SparseTensor(indices=tf.Tensor(</span><br><span class="line">[[0 2]</span><br><span class="line"> [0 1]</span><br><span class="line"> [2 3]], shape=(3, 2), dtype=int64), values=tf.Tensor([1. 2. 3.], shape=(3,), dtype=float32), dense_shape=tf.Tensor([3 4], shape=(2,), dtype=int64))</span><br><span class="line"> InvalidArgumentError: indices[1] = [0,1] is out of order [Op:SparseToDense]</span><br><span class="line"> </span><br><span class="line"> tf.Tensor(</span><br><span class="line">[[0. 2. 1. 0.]</span><br><span class="line"> [0. 0. 0. 0.]</span><br><span class="line"> [0. 0. 0. 3.]], shape=(3, 4), dtype=float32)</span><br></pre></td></tr></table></figure>
</li>
<li><p>tf.Variable</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = tf.Variable([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],dtype=tf.float32)</span><br><span class="line">print(v)</span><br><span class="line">print(v.value())</span><br><span class="line">print(v.numpy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新赋值</span></span><br><span class="line">v.assign(<span class="number">2</span>*v)</span><br><span class="line">v[<span class="number">1</span>,<span class="number">2</span>].assign(<span class="number">43</span>)</span><br><span class="line">v[<span class="number">1</span>].assign([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;tf.Variable <span class="string">'Variable:0'</span> shape=(2, 3) dtype=float32, numpy=</span><br><span class="line">array([[1., 2., 3.],</span><br><span class="line">       [4., 5., 6.]], dtype=float32)&gt;</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]], shape=(2, 3), dtype=float32)</span><br><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]]</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 重新赋值(只能用assign函数，用=是不可以的)</span></span><br><span class="line"> &lt;tf.Variable <span class="string">'UnreadVariable'</span> shape=(2, 3) dtype=float32, numpy=</span><br><span class="line">array([[ 2.,  4.,  6.],</span><br><span class="line">       [ 8., 10., 12.]], dtype=float32)&gt;</span><br><span class="line"></span><br><span class="line">&lt;tf.Variable <span class="string">'UnreadVariable'</span> shape=(2, 3) dtype=float32, numpy=</span><br><span class="line">array([[ 2.,  4.,  6.],</span><br><span class="line">       [ 8., 10., 43.]], dtype=float32)&gt;</span><br><span class="line"></span><br><span class="line">&lt;tf.Variable <span class="string">'UnreadVariable'</span> shape=(2, 3) dtype=float32, numpy=</span><br><span class="line">array([[2., 4., 6.],</span><br><span class="line">       [7., 8., 9.]], dtype=float32)&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="自定义损失函数"><a href="#自定义损失函数" class="headerlink" title="自定义损失函数"></a>自定义损失函数</h2><blockquote>
<p>在房价回归预测的程序中使用自定义损失函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Sized</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras <span class="keyword">as</span> keras</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">housing: sklearn.utils.Bunch = fetch_california_housing()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认3:1划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    housing.data, housing.target, random_state=<span class="number">7</span>, test_size=<span class="number">0.25</span></span><br><span class="line">)</span><br><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(</span><br><span class="line">    x_train, y_train, random_state=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_train_scaler = scaler.fit_transform(x_train)</span><br><span class="line">x_valid_scaler = scaler.transform(x_valid)</span><br><span class="line">x_test_scaler = scaler.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建模型</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>, input_shape=x_train.shape[<span class="number">1</span>:]))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customized_loss</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.square(y_true - y_pred))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.compile(loss=customized_loss,</span><br><span class="line">              optimizer=<span class="string">"sgd"</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>，<span class="string">'mse'</span>]</span><br><span class="line">              )</span><br><span class="line">callbacks = [</span><br><span class="line">    keras.callbacks.EarlyStopping(</span><br><span class="line">        patience=<span class="number">5</span>, min_delta=<span class="number">1e-3</span></span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line">history = model.fit(x_train_scaler, y_train,</span><br><span class="line">                    validation_data=(x_valid_scaler, y_valid),</span><br><span class="line">                    epochs=<span class="number">100</span>,</span><br><span class="line">                    callbacks=callbacks)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ETA: 0s - loss: 0.3770 - accuracy: 0.0029 - mse: 0.3770 </p>
<p>可见自定义的loss和mse计算的结果是一致的</p>
</blockquote>
<h2 id="自定义Layer"><a href="#自定义Layer" class="headerlink" title="自定义Layer"></a>自定义Layer</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义激活层 tf.nn.softplus: log(1+e^-x)</span></span><br><span class="line">customized_softplus = tf.keras.layers.Lambda(<span class="keyword">lambda</span> x: tf.nn.softplus(x), name=<span class="string">"ActiveLayer"</span>)</span><br><span class="line">print(customized_softplus([<span class="number">-10.</span>, <span class="number">-5.</span>, <span class="number">0.</span>, <span class="number">5.</span>, <span class="number">10.</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Denselayer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomizedDenlayer</span><span class="params">(keras.layers.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, unit, activation=None, **kwargs)</span>:</span></span><br><span class="line">        self.units = unit</span><br><span class="line">        self.activation = keras.layers.Layer(activation)</span><br><span class="line">        super(CustomizedDenlayer, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, input_shape)</span>:</span></span><br><span class="line">        <span class="string">"""构建所需要的参数"""</span></span><br><span class="line">        self.kernel = self.add_weight(name=<span class="string">"kernel"</span>,</span><br><span class="line">                                      shape=(input_shape[<span class="number">1</span>], self.units),</span><br><span class="line">                                      initializer=<span class="string">'uniform'</span>,</span><br><span class="line">                                      trainable=<span class="literal">True</span>)</span><br><span class="line">        self.bias = self.add_weight(name=<span class="string">"bias"</span>,</span><br><span class="line">                                    shape=(self.units,),</span><br><span class="line">                                    initializer=<span class="string">'zeros'</span>,</span><br><span class="line">                                    trainable=<span class="literal">True</span>)</span><br><span class="line">        super(CustomizedDenlayer, self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""完成正向计算"""</span></span><br><span class="line">        <span class="keyword">return</span> self.activation(x @ self.kernel + self.bias)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建模型</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(CustomizedDenlayer(<span class="number">30</span>, activation=<span class="string">"relu"</span>, input_shape=x_train.shape[<span class="number">1</span>:]))</span><br><span class="line">model.add(CustomizedDenlayer(<span class="number">1</span>))</span><br><span class="line">model.add(customized_softplus)</span><br><span class="line"><span class="comment"># 相当于下面两种方式</span></span><br><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="comment"># model.add(keras.layers.Dense(1, activation="softplus"))</span></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line"><span class="comment"># model.add(keras.layers.Dense(1))</span></span><br><span class="line"><span class="comment"># model.add(keras.layers.Activation("softplus"))</span></span><br><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure>

<h2 id="tf-function的使用"><a href="#tf-function的使用" class="headerlink" title="tf.function的使用"></a>tf.function的使用</h2><ul>
<li><p>将普通的python代码转为图结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @tf.function # 可以使用修饰函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scaled_elu</span><span class="params">(z, scale=<span class="number">1.0</span>, alpha=<span class="number">1.0</span>)</span>:</span></span><br><span class="line">    <span class="comment"># z &gt;=0 ? scale *z : scale * alpha * tf.nn.elu(z)</span></span><br><span class="line">    is_positive = tf.greater_equal(z, <span class="number">0.0</span>)</span><br><span class="line">    <span class="comment"># 满足条件的替换成第一个参数 不满足条件的替换程第二个参数</span></span><br><span class="line">    <span class="keyword">return</span> scale * tf.where(is_positive, z, alpha * tf.nn.elu(z))</span><br><span class="line"></span><br><span class="line">print(scaled_elu(tf.constant(<span class="number">-3.</span>)))</span><br><span class="line">print(scaled_elu(tf.constant([<span class="number">-3.</span>, <span class="number">-2.5</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将python语法函数转为tf的函数,优势是快</span></span><br><span class="line">scaled_elu_tf = tf.function(scaled_elu)</span><br><span class="line">print(scaled_elu_tf(tf.constant(<span class="number">-3.</span>)))</span><br><span class="line">print(scaled_elu_tf(tf.constant([<span class="number">3.</span>, <span class="number">-2.5</span>])))</span><br></pre></td></tr></table></figure>
</li>
<li><p>对function的参数做限定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@tf.function(input_signature=[tf.TensorSpec([None], tf.int32, name='x')])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.pow(z, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(cube(tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])))</span><br><span class="line">print(cube(tf.constant([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>])))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tf.Tensor([ 1  8 27], shape=(3,), dtype=int32)</span><br><span class="line"></span><br><span class="line">ValueError: Python inputs incompatible with input_signature:</span><br><span class="line">  inputs: (</span><br><span class="line">    tf.Tensor([1. 2. 3.], shape=(3,), dtype=float32))</span><br><span class="line">  input_signature: (</span><br><span class="line">    TensorSpec(shape=(None,), dtype=tf.int32, name=<span class="string">'x'</span>))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="自定义求导"><a href="#自定义求导" class="headerlink" title="自定义求导"></a>自定义求导</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.0</span> * x ** <span class="number">2</span> + <span class="number">2.0</span> * x - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求导</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">approximate_derivative</span><span class="params">(f, x, eps=<span class="number">1e-3</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (f(x + eps) - f(x - eps)) / (<span class="number">2.0</span> * eps)</span><br><span class="line"></span><br><span class="line">print(approximate_derivative(f, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x1, x2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x1 + <span class="number">5</span>) * (x2 ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求偏导</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">approximate_gradient</span><span class="params">(g, x1, x2, eps=<span class="number">1e-3</span>)</span>:</span></span><br><span class="line">    dg_x1 = approximate_derivative(<span class="keyword">lambda</span> x: g(x, x2), x1, eps)</span><br><span class="line">    dg_x2 = approximate_derivative(<span class="keyword">lambda</span> x: g(x, x1), x2, eps)</span><br><span class="line">    <span class="keyword">return</span> dg_x1, dg_x2</span><br><span class="line"></span><br><span class="line">print(approximate_gradient(g, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = tf.Variable(<span class="number">2.0</span>)</span><br><span class="line">x2 = tf.Variable(<span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    z = g(x1, x2)</span><br><span class="line"><span class="comment"># tape只能用一次</span></span><br><span class="line">dz_x1 = tape.gradient(z, x1)</span><br><span class="line">print(dz_x1) <span class="comment"># tf.Tensor(9.0, shape=(), dtype=float32)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    dz_x2 = tape.gradient(z, x2)</span><br><span class="line"><span class="keyword">except</span> RuntimeError <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="comment"># GradientTape.gradient can only be called once on non-persistent tapes.</span></span><br><span class="line">    print(ex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决上面的问题</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape(persistent=<span class="literal">True</span>) <span class="keyword">as</span> tape:</span><br><span class="line">    z = g(x1, x2)</span><br><span class="line">dz_x1 = tape.gradient(z, x1) <span class="comment"># tf.Tensor(9.0, shape=(), dtype=float32)</span></span><br><span class="line">dz_x2 = tape.gradient(z, x2)<span class="comment"># tf.Tensor(42.0, shape=(), dtype=float32)</span></span><br><span class="line"><span class="keyword">del</span> tape <span class="comment"># 需要手动删除tape，因为配置persistent=True后系统不会自动回收</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接求x1和x2的偏导</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    z = g(x1, x2)</span><br><span class="line">dz_x1x2 = tape.gradient(z,[x1,x2])</span><br><span class="line">print(dz_x1x2) </span><br><span class="line"><span class="comment"># [&lt;tf.Tensor: id=46, shape=(), dtype=float32, numpy=9.0&gt;,</span></span><br><span class="line"><span class="comment"># &lt;tf.Tensor: id=52, shape=(), dtype=float32, numpy=42.0&gt;]</span></span><br></pre></td></tr></table></figure>

<p>对常数求导</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">x2 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">dz_x1 = tape.gradient(z, x1)</span><br><span class="line">dz_x2 = tape.gradient(z, x2)</span><br><span class="line">print(dz_x1)</span><br><span class="line">print(dz_x2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    z = g(x1, x2)</span><br><span class="line">dz_x1x2 = tape.gradient(z, [x1, x2])</span><br><span class="line">print(dz_x1x2) <span class="comment"># [None, None]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出None，当要观察constant的梯度时候可以用tf.watch()方法</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    tape.watch(x1) <span class="comment"># 可以关注constant的梯度</span></span><br><span class="line">    tape.watch(x2) <span class="comment"># 可以关注constant的梯度</span></span><br><span class="line">    z = g(x1, x2)</span><br><span class="line">dz_x1x2 = tape.gradient(z, [x1, x2])</span><br><span class="line">print(dz_x1x2)</span><br><span class="line"><span class="comment"># [&lt;tf.Tensor: id=46, shape=(), dtype=float32, numpy=9.0&gt;,</span></span><br><span class="line"><span class="comment"># &lt;tf.Tensor: id=52, shape=(), dtype=float32, numpy=42.0&gt;]</span></span><br></pre></td></tr></table></figure>

<p>对多函数求导</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x1 = tf.Variable(<span class="number">5.0</span>, name=<span class="string">"x1"</span>)</span><br><span class="line">x2 = tf.Variable(<span class="number">5.0</span>, name=<span class="string">"x2"</span>)</span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    z1 = <span class="number">3</span> * x1 + <span class="number">4</span> * x2</span><br><span class="line">    z2 = x1 ** <span class="number">2</span> + x2 ** <span class="number">6</span></span><br><span class="line">print(tape.gradient([z1, z2], [x1, x2]))</span><br><span class="line"><span class="comment"># 输出是[z1对x1的偏导+z2对x1的偏导. z1对x2的偏导+z2对x2的偏导]</span></span><br><span class="line"><span class="comment"># [&lt;tf.Tensor: id=45, shape=(), dtype=float32, numpy=13.0&gt;, </span></span><br><span class="line"><span class="comment"># &lt;tf.Tensor: id=46, shape=(), dtype=float32, numpy=18754.0&gt;]</span></span><br></pre></td></tr></table></figure>

<p>求二阶导数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x1, x2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x1 + <span class="number">5</span>) * (x2 ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">x1 = tf.Variable(<span class="number">2.0</span>)</span><br><span class="line">y1 = tf.Variable(<span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">with</span> tf.GradientTape(persistent=<span class="literal">True</span>) <span class="keyword">as</span> out_tape:</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape(persistent=<span class="literal">True</span>) <span class="keyword">as</span> inner_tape:</span><br><span class="line">        z = g(x1, y1)</span><br><span class="line">    inner_grads = inner_tape.gradient(z, [x1, y1])</span><br><span class="line">outer_grads = [out_tape.gradient(inner_grad, [x1, y1]) <span class="keyword">for</span> inner_grad <span class="keyword">in</span> inner_grads]</span><br><span class="line">print(inner_grads)</span><br><span class="line">print(outer_grads)</span><br><span class="line"><span class="keyword">del</span> inner_tape</span><br><span class="line"><span class="keyword">del</span> out_tape</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[None, &lt;tf.Tensor: id=83, shape=(), dtype=float32, numpy=6.0&gt;], [&lt;tf.Tensor: id=94, shape=(), dtype=float32, numpy=6.0&gt;, &lt;tf.Tensor: id=92, shape=(), dtype=float32, numpy=14.0&gt;]]</span></span><br></pre></td></tr></table></figure>

<p>反向传播算法实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.0</span> * x ** <span class="number">2</span> + <span class="number">2.0</span> * x - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.1</span></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        z = f(x)</span><br><span class="line">    dz_dx = tape.gradient(z, x)</span><br><span class="line">    x.assign_sub(learning_rate * dz_dx)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tf.Variable &#39;Variable:0&#39; shape&#x3D;() dtype&#x3D;float32, numpy&#x3D;-0.3333333&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义优化器"><a href="#自定义优化器" class="headerlink" title="自定义优化器"></a>自定义优化器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">learning_rate = <span class="number">0.1</span></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">optimizer = keras.optimizers.SGD(learning_rate=learning_rate)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        z = f(x)</span><br><span class="line">    dz_dx = tape.gradient(z, x)</span><br><span class="line">    <span class="comment"># x.assign_sub(learning_rate * dz_dx)</span></span><br><span class="line">    optimizer.apply_gradients([(dz_dx, x)])</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;tf.Variable <span class="string">'Variable:0'</span> shape=() dtype=float32, numpy=<span class="number">-0.3333333</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="手动实现神经网络用于房价回归预测"><a href="#手动实现神经网络用于房价回归预测" class="headerlink" title="手动实现神经网络用于房价回归预测"></a>手动实现神经网络用于房价回归预测</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Sized</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras <span class="keyword">as</span> keras</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_california_housing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">housing: sklearn.utils.Bunch = fetch_california_housing()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认3:1划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(</span><br><span class="line">    housing.data, housing.target, random_state=<span class="number">7</span>, test_size=<span class="number">0.25</span></span><br><span class="line">)</span><br><span class="line">x_train, x_valid, y_train, y_valid = train_test_split(</span><br><span class="line">    x_train, y_train, random_state=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_train_scaler = scaler.fit_transform(x_train)</span><br><span class="line">x_valid_scaler = scaler.transform(x_valid)</span><br><span class="line">x_test_scaler = scaler.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建模型</span></span><br><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">30</span>, activation=<span class="string">"relu"</span>, input_shape=x_train.shape[<span class="number">1</span>:]))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line">model.compile(loss=<span class="string">"mean_squared_error"</span>,optimizer=<span class="string">"sgd"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># metric的使用</span></span><br><span class="line">metric = keras.metrics.MeanSquaredError()</span><br><span class="line">print(metric([<span class="number">5.</span>], [<span class="number">2.</span>]))</span><br><span class="line">print(metric([<span class="number">1.</span>], [<span class="number">0.</span>]))</span><br><span class="line">print(metric.result())  <span class="comment"># 累加数据</span></span><br><span class="line"></span><br><span class="line">metric.reset_states()</span><br><span class="line">print(metric([<span class="number">1.</span>], [<span class="number">3.</span>]))</span><br><span class="line">print(metric.result())  <span class="comment"># 清除之前的累加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">epochs = <span class="number">100</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">steps_per_epoch = len(x_train_scaler) // batch_size</span><br><span class="line">optimizer = keras.optimizers.SGD()</span><br><span class="line">metric = keras.metrics.MeanSquaredError()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据每一次batch的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_batch</span><span class="params">(x, y, batch_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">    idx = np.random.randint(<span class="number">0</span>, len(x), size=batch_size)</span><br><span class="line">    <span class="keyword">return</span> x[idx], y[idx]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">    metric.reset_states()<span class="comment"># 每次epoch都清除metric</span></span><br><span class="line">    <span class="comment"># 开始batch遍历</span></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(steps_per_epoch):</span><br><span class="line">        <span class="comment"># 获取batch数据</span></span><br><span class="line">        x_batch, y_batch = random_batch(x_train_scaler, y_train, batch_size=batch_size)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            y_pred = model(x_batch) <span class="comment"># 正向传播</span></span><br><span class="line">            loss = tf.reduce_mean(keras.losses.mean_squared_error(y_batch, y_pred))<span class="comment"># 获得loss</span></span><br><span class="line">            metric(y_batch, y_pred)<span class="comment"># 记录loss(事先定义的mse)</span></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        grads = tape.gradient(loss, model.variables)</span><br><span class="line">        grads_and_vars = zip(grads, model.variables)</span><br><span class="line">        optimizer.apply_gradients(grads_and_vars)</span><br><span class="line">        <span class="comment"># 输出每一次的batch结果</span></span><br><span class="line">        print(<span class="string">"\rEpoch"</span>, epoch, <span class="string">"train mse:"</span>, metric.result(), end=<span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 输出每一次epoch的结果</span></span><br><span class="line">    y_valid_pred = model(x_valid_scaler)</span><br><span class="line">    valid_loss = tf.reduce_mean(keras.losses.mean_squared_error(y_valid_pred, y_valid))</span><br><span class="line">    print(<span class="string">"\r"</span>, epoch, <span class="string">"valid mse:"</span>, valid_loss, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TensorFlow系列教程</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow系列教程1-简介</title>
    <url>/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%80%E8%AE%B2Tensorflow%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>​    <img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%80%E8%AE%B2Tensorflow%E7%AE%80%E4%BB%8B/bg-1582037000909.jpg" alt>   </p>
<a id="more"></a>

<h1 id="Tensorflow系列教程1-简介"><a href="#Tensorflow系列教程1-简介" class="headerlink" title="Tensorflow系列教程1-简介"></a>Tensorflow系列教程1-简介</h1><h2 id="Tensorflow是什么"><a href="#Tensorflow是什么" class="headerlink" title="Tensorflow是什么"></a>Tensorflow是什么</h2><p>Tensorflow是Google的一个开源软件库。</p>
<ul>
<li>采用数据流图，用于数值计算<ul>
<li>节点用于处理数据</li>
<li>线表示节点间的输入输出关系</li>
<li>线上运输张量</li>
<li>节点被分配到各种计算设备上运行</li>
</ul>
</li>
<li>支持多种平台——GPU、CPU、移动设备</li>
<li>最初用于深度学习，变得越来越通用、</li>
</ul>
<p>Tensorflow的特点</p>
<ul>
<li>高度的灵活性</li>
<li>真正的可移植性</li>
<li>产品和科研结合</li>
<li>自动求微分</li>
<li>多语言支持</li>
<li>性能最优化</li>
</ul>
<h2 id="Tensorflow版本变迁"><a href="#Tensorflow版本变迁" class="headerlink" title="Tensorflow版本变迁"></a>Tensorflow版本变迁</h2><ul>
<li>2015年11月<blockquote>
<p>TensorFlow宣布开源并发布首次版本</p>
</blockquote>
</li>
<li>2015年12月<blockquote>
<p>支持CPU，支持Python3.3（v0.6)</p>
</blockquote>
</li>
<li>2016年4月<blockquote>
<p>支持分布式(v0.8)</p>
</blockquote>
</li>
<li>2016年11月<blockquote>
<p>支持Windows(v0.11)</p>
</blockquote>
</li>
<li>2017年2月<blockquote>
<p>性能改进，API稳定性(v1.0)4</p>
</blockquote>
</li>
<li>2017年4月<blockquote>
<p>Keras集成(v1.1)</p>
</blockquote>
</li>
<li>2017年8月<blockquote>
<p>高级API,预算估计器，更多模型，初始TPU支持(v1.3)</p>
</blockquote>
</li>
<li>2017年11月<blockquote>
<p>Eager execution和Tensorflow Lite(v1.5)</p>
</blockquote>
</li>
<li>2018年3月<blockquote>
<p>推出TF Hub,TensorFlow.js,TF扩展库TensorFlow Extend(TFX)</p>
</blockquote>
</li>
<li>2018年5月<blockquote>
<p>新入门内容，Cloud TPU模块与管道(v1.6)</p>
</blockquote>
</li>
<li>2018年6月<blockquote>
<p>新的分布式策略API，概率编程工具TensorFlow Probability(v1.8)</p>
</blockquote>
</li>
<li>2019年8月<blockquote>
<p>Cloud Big Table集成(v1.10)</p>
</blockquote>
</li>
<li>2019年10月<blockquote>
<p>侧重于可用性的API改进(v1.12)</p>
</blockquote>
</li>
<li>2019年10月<blockquote>
<p>Tensorflow v2.0发布</p>
</blockquote>
</li>
</ul>
<h3 id="Tensorflow1-0-主要特性"><a href="#Tensorflow1-0-主要特性" class="headerlink" title="Tensorflow1.0-主要特性"></a>Tensorflow1.0-主要特性</h3><ul>
<li>XLA-Acclerate Linear Algebra<ul>
<li>专门针对线性计算的优化器，可以使得TF计算的更快。</li>
<li>提升训练速度58倍</li>
<li>具有可移植性，可以在移动设备上运行</li>
</ul>
</li>
<li>引入更高级别的API-tf.layers/tf.metrics/tf.losses/tf.keras</li>
<li>TensorFlow调试器</li>
<li>支持Docker镜像，引入TensorFlow serving服务</li>
<li>TensorFlow1.0的架构</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%80%E8%AE%B2Tensorflow%E7%AE%80%E4%BB%8B/tfv1.0%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="tfv1.0架构图.jpg"></p>
<h3 id="TensorFlow2-0-主要特性"><a href="#TensorFlow2-0-主要特性" class="headerlink" title="TensorFlow2.0 -主要特性"></a>TensorFlow2.0 -主要特性</h3><ul>
<li><p>使用tf.keras和eager mode进行更加简单的模型构建，tf也主要推广这两个feature</p>
</li>
<li><p>鲁棒的跨平台模型部署</p>
<ul>
<li>Tensorflow服务<ul>
<li>直接通过HTTP/REST或GRPC/协议缓冲区</li>
<li>TensorFlow Lite-可以部署在Android、IOS和嵌入式设备上</li>
<li>TensorFlow.js-在javascript中部署模型</li>
<li>其他语言的部署</li>
</ul>
</li>
</ul>
</li>
<li><p>强大的研究实验，使得研究实验更加方便快捷</p>
<ul>
<li>Keras功能API和子类API，运行创建复杂的拓扑结构</li>
<li>自定义的训练逻辑，使用tf.GradientTape和tf.custom_gradien进行更细粒度的控制</li>
<li>底层API自始至终可以与高层结合使用，完全的可定制，使模型更加灵活</li>
<li>高级扩展：Ragged Tensors、Tensor2Tensor等</li>
</ul>
</li>
<li><p>清楚不推荐使用的API和减少重复来简化API</p>
</li>
<li><p>TensorFlow2.0的架构</p>
<ul>
<li>相比1.0版本，2.0版本去掉了layers，目的是使用户使用更高层的api</li>
<li>相比1.0版本，2.0版本添加了deployment模块。</li>
</ul>
<p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%80%E8%AE%B2Tensorflow%E7%AE%80%E4%BB%8B/image-20200212182157130.png" alt="image-20200212182157130"></p>
</li>
<li><p>tf2.0开发流程</p>
<ul>
<li>使用tf.data加载数据</li>
<li>使用tf.keras构建模型，也可以用premade estimator来验证模型<ul>
<li>使用tensorflow hub进行迁移学习</li>
</ul>
</li>
<li>使用eager mode进行运行和测试</li>
<li>使用分发策略进行分布式训练</li>
<li>导出到SavedModel</li>
<li>使用TensorFlow Saver、Tensorflow Lite、Tensorflow.js 部署模型</li>
</ul>
</li>
</ul>
<h2 id="Tensorflow-vs-PyTorch"><a href="#Tensorflow-vs-PyTorch" class="headerlink" title="Tensorflow vs PyTorch"></a>Tensorflow vs PyTorch</h2><h3 id="入门时间"><a href="#入门时间" class="headerlink" title="入门时间"></a>入门时间</h3><ul>
<li><p>TensorFlow1.*</p>
<ul>
<li>静态图</li>
<li>学习额外概念<ul>
<li>图、会话、变量、占位符等</li>
</ul>
</li>
<li>写样板代码</li>
</ul>
</li>
<li><p>TensorFlow2.0</p>
<ul>
<li>动态图</li>
<li>Eager mode避免1.0缺点，直接集成在python中</li>
</ul>
</li>
<li><p>Pytorch</p>
<ul>
<li>动态图</li>
<li>Numpy的扩展，直接集成在python中</li>
</ul>
</li>
</ul>
<h3 id="图创建和调试"><a href="#图创建和调试" class="headerlink" title="图创建和调试"></a>图创建和调试</h3><p><img src="/2020/02/25/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/tensorflow%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%80%E8%AE%B2Tensorflow%E7%AE%80%E4%BB%8B/image-20200212210157272.png" alt="image-20200212210157272"></p>
<ul>
<li><p>Tensorflow1.x</p>
<ul>
<li>静态图优点<ul>
<li>效率高</li>
</ul>
</li>
<li>静态图缺点<ul>
<li>难以调试，学习tfdbg调试</li>
</ul>
</li>
</ul>
</li>
<li><p>TensorFlow2.0和Pytorch</p>
<ul>
<li>动态图优点<ul>
<li>调试熔容易</li>
<li>python自带调试工具</li>
</ul>
</li>
</ul>
</li>
<li><p>TF1.x实现一个功能的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">  print(tf.__version__)</span><br><span class="line">  </span><br><span class="line">  x = tf.Variable(<span class="number">0.</span>)</span><br><span class="line">y = tf.Variable(<span class="number">0.</span>)</span><br><span class="line">  print(x)</span><br><span class="line">  print(y)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># x = x + y</span></span><br><span class="line">add_op = x.assign(x + y)</span><br><span class="line">  <span class="comment"># y = y / 2</span></span><br><span class="line">  div_op = y.assign(y / <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">      <span class="keyword">for</span> iter <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">          sess.run(add_op)</span><br><span class="line">          sess.run(div_op)</span><br><span class="line">      print(x.eval()) <span class="comment"># sess.eval(x)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pytorch实现一个功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">print(torch.__version__)</span><br><span class="line"></span><br><span class="line">x = torch.Tensor([<span class="number">0.</span>])</span><br><span class="line">y = torch.Tensor([<span class="number">1.</span>])</span><br><span class="line"><span class="keyword">for</span> iter <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">	x = x + y </span><br><span class="line">	y = y / <span class="number">2</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>TF2.0实现一个功能的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># tf.enable_eager_execution() # 在1.x中可以调用本语句开启动态图</span></span><br><span class="line">print(tf.__version__)</span><br><span class="line"></span><br><span class="line">x = tf.constant(<span class="number">0.</span>)</span><br><span class="line">y = tf.constant(<span class="number">1.</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> iter <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    x = x + y</span><br><span class="line">    y = y / <span class="number">2</span></span><br><span class="line">print(x.numpy())</span><br></pre></td></tr></table></figure>
</li>
<li><p>纯python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> iter <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">	x = x + y</span><br><span class="line">	y = y / <span class="number">2</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="全面性"><a href="#全面性" class="headerlink" title="全面性"></a>全面性</h3><ul>
<li>Pytorch缺少<ul>
<li>沿维翻转张量(np.flip,np.flipud,np.fliplr)</li>
<li>检查无穷与非数值张量(np.is_nan,np.is_inf)</li>
<li>快速傅里叶变换(np.fft)</li>
</ul>
</li>
<li>随着时间的变化，越来越接近</li>
</ul>
<h3 id="序列化与部署"><a href="#序列化与部署" class="headerlink" title="序列化与部署"></a>序列化与部署</h3><ul>
<li>TensorFlow支持更加广泛<ul>
<li>图保存为protocol buffer</li>
<li>跨语言</li>
<li>跨平台</li>
</ul>
</li>
<li>Pytorch支持比较简单</li>
</ul>
<h2 id="Tensorflow的环境配置"><a href="#Tensorflow的环境配置" class="headerlink" title="Tensorflow的环境配置"></a>Tensorflow的环境配置</h2><h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><ul>
<li>Virtualenv安装<ul>
<li><a href="http://www.tensorflow.org/install/pip" target="_blank" rel="noopener">www.tensorflow.org/install/pip</a></li>
</ul>
</li>
<li>conda安装<ul>
<li><code>conda install tenserflow-gpu</code></li>
</ul>
</li>
</ul>
<h3 id="云端配置"><a href="#云端配置" class="headerlink" title="云端配置"></a>云端配置</h3><ul>
<li>为什么要在云端配置<ul>
<li>规格统一，节省自己的机器</li>
<li>有直接配置好的环境镜像</li>
</ul>
</li>
<li>云环境<ul>
<li>Google Cloud配置 - 送300刀免费体验</li>
<li>Amazon</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>TensorFlow系列教程</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法概论</title>
    <url>/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/</url>
    <content><![CDATA[<p>​    <img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/bg.jpg" alt="bg"></p>
<a id="more"></a>

<h1 id="第1章-统计学习方法概论"><a href="#第1章-统计学习方法概论" class="headerlink" title="第1章 统计学习方法概论"></a>第1章 统计学习方法概论</h1><p>1．统计学习是关于计算机基于数据构建概率统计模型并运用模型对数据进行分析与预测的一门学科。统计学习包括监督学习、非监督学习、半监督学习和强化学习。</p>
<p>2．统计学习方法三要素——模型、策略、算法，对理解统计学习方法起到提纲挈领的作用。</p>
<p>3．本书主要讨论监督学习，监督学习可以概括如下：从给定有限的训练数据出发， 假设数据是独立同分布的，而且假设模型属于某个假设空间，应用某一评价准则，从假设空间中选取一个最优的模型，使它对已给训练数据及未知测试数据在给定评价标准意义下有最准确的预测。</p>
<p>4．统计学习中，进行模型选择或者说提高学习的泛化能力是一个重要问题。如果只考虑减少训练误差，就可能产生过拟合现象。模型选择的方法有正则化与交叉验证。学习方法泛化能力的分析是统计学习理论研究的重要课题。</p>
<p>5．分类问题、标注问题和回归问题都是监督学习的重要问题。本书中介绍的统计学习方法包括感知机、$k$近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与最大熵模型、支持向量机、提升方法、EM算法、隐马尔可夫模型和条件随机场。这些方法是主要的分类、标注以及回归方法。它们又可以归类为生成方法与判别方法。</p>
<h3 id="使用最小二乘法拟和曲线"><a href="#使用最小二乘法拟和曲线" class="headerlink" title="使用最小二乘法拟和曲线"></a>使用最小二乘法拟和曲线</h3><p>对于数据$(x_i, y_i)   (i=1, 2, 3…,m)$</p>
<p>拟合出函数$h(x)$</p>
<p>有误差，即残差：$r_i=h(x_i)-y_i$</p>
<p>此时$L2$范数(残差平方和)最小时，$h(x)$ 和 $y$ 相似度最高，更拟合</p>
<p>一般的$H(x)$为$n$次的多项式，$H(x)=w_0+w_1x+w_2x^2+…w_nx^n$</p>
<p>$w(w_0,w_1,w_2,…,w_n)$为参数</p>
<p>最小二乘法就是要找到一组$w(w_0,w_1,w_2,…,w_n)$和$w(w_0,w_1,w_2,…,w_n)$，</p>
<p>使得 $\sum_{i=1}^n(h(x_i)-y_i)^2$(残差平方和) 最小</p>
<p>即，求 $min\sum_{i=1}^n(h(x_i)-y_i)^2$</p>
<hr>
<p>举例：我们用目标函数$y=sin2{\pi}x$, 加上一个正态分布的噪音干扰，用多项式去拟合【例1.1 11页】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> leastsq</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<ul>
<li>ps: numpy.poly1d([1,2,3])  生成  $1x^2+2x^1+3x^0$*</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">real_func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sin(<span class="number">2</span>*np.pi*x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多项式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_func</span><span class="params">(p, x)</span>:</span></span><br><span class="line">    f = np.poly1d(p)</span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 残差</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">residuals_func</span><span class="params">(p, x, y)</span>:</span></span><br><span class="line">    ret = fit_func(p, x) - y</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十个点</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">x_points = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 加上正态分布噪音的目标函数的值</span></span><br><span class="line">y_ = real_func(x)</span><br><span class="line">y = [np.random.normal(<span class="number">0</span>, <span class="number">0.1</span>) + y1 <span class="keyword">for</span> y1 <span class="keyword">in</span> y_]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fitting</span><span class="params">(M=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    M    为 多项式的次数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 随机初始化多项式参数</span></span><br><span class="line">    p_init = np.random.rand(M + <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 最小二乘法</span></span><br><span class="line">    p_lsq = leastsq(residuals_func, p_init, args=(x, y))</span><br><span class="line">    print(<span class="string">'Fitting Parameters:'</span>, p_lsq[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化</span></span><br><span class="line">    plt.plot(x_points, real_func(x_points), label=<span class="string">'real'</span>)</span><br><span class="line">    plt.plot(x_points, fit_func(p_lsq[<span class="number">0</span>], x_points), label=<span class="string">'fitted curve'</span>)</span><br><span class="line">    plt.plot(x, y, <span class="string">'bo'</span>, label=<span class="string">'noise'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    <span class="keyword">return</span> p_lsq</span><br></pre></td></tr></table></figure>

<h3 id="M-0"><a href="#M-0" class="headerlink" title="M=0"></a>M=0</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># M=0</span></span><br><span class="line">p_lsq_0 = fitting(M=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Fitting Parameters: [-0.00065085]</code></pre><p><img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/output_10_1.png" alt="png"></p>
<h3 id="M-1"><a href="#M-1" class="headerlink" title="M=1"></a>M=1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># M=1</span></span><br><span class="line">p_lsq_1 = fitting(M=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Fitting Parameters: [-1.41527001  0.70698415]</code></pre><p><img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/output_12_1.png" alt="png"></p>
<h3 id="M-3"><a href="#M-3" class="headerlink" title="M=3"></a>M=3</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># M=3</span></span><br><span class="line">p_lsq_3 = fitting(M=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Fitting Parameters: [ 23.46475052 -35.27083856  12.01307239  -0.11506344]</code></pre><p><img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/output_14_1.png" alt="png"></p>
<h3 id="M-9"><a href="#M-9" class="headerlink" title="M=9"></a>M=9</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># M=9</span></span><br><span class="line">p_lsq_9 = fitting(M=<span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Fitting Parameters: [-8.77163629e+03  4.23981410e+04 -8.63175728e+04  9.60653240e+04
 -6.34468677e+04  2.52539511e+04 -5.84697784e+03  6.90738586e+02
 -2.49704859e+01 -2.32734083e-02]</code></pre><p><img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/output_16_1.png" alt="png"></p>
<p>当M=9时，多项式曲线通过了每个数据点，但是造成了过拟合</p>
<h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>结果显示过拟合， 引入正则化项(regularizer)，降低过拟合</p>
<p>$Q(x)=\sum_{i=1}^n(h(x_i)-y_i)^2+\lambda||w||^2$。</p>
<p>回归问题中，损失函数是平方损失，正则化可以是参数向量的L2范数,也可以是L1范数。</p>
<ul>
<li><p>L1: regularization*abs(p)</p>
</li>
<li><p>L2: 0.5 * regularization * np.square(p)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">regularization = <span class="number">0.0001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">residuals_func_regularization</span><span class="params">(p, x, y)</span>:</span></span><br><span class="line">    ret = fit_func(p, x) - y</span><br><span class="line">    ret = np.append(ret,</span><br><span class="line">                    np.sqrt(<span class="number">0.5</span> * regularization * np.square(p)))  <span class="comment"># L2范数作为正则化项</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最小二乘法,加正则化项</span></span><br><span class="line">p_init = np.random.rand(<span class="number">9</span> + <span class="number">1</span>)</span><br><span class="line">p_lsq_regularization = leastsq(</span><br><span class="line">    residuals_func_regularization, p_init, args=(x, y))</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x_points, real_func(x_points), label=<span class="string">'real'</span>)</span><br><span class="line">plt.plot(x_points, fit_func(p_lsq_9[<span class="number">0</span>], x_points), label=<span class="string">'fitted curve'</span>)</span><br><span class="line">plt.plot(</span><br><span class="line">    x_points,</span><br><span class="line">    fit_func(p_lsq_regularization[<span class="number">0</span>], x_points),</span><br><span class="line">    label=<span class="string">'regularization'</span>)</span><br><span class="line">plt.plot(x, y, <span class="string">'bo'</span>, label=<span class="string">'noise'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.legend.Legend at 0x1fcc1f58cc8&gt;</code></pre><p><img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/output_22_1.png" alt="png"></p>
<hr>
<p>参考代码：<a href="https://github.com/wzyonggege/statistical-learning-method" target="_blank" rel="noopener">https://github.com/wzyonggege/statistical-learning-method</a></p>
<p>中文注释制作：机器学习初学者</p>
<p>微信公众号：ID:ai-start-com</p>
<p>配置环境：python 3.5+</p>
<p>代码全部测试通过。<br><img src="/2020/02/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/1.Introduction_to_statistical_learning_methods/gongzhong.jpg" alt="gongzhong"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>plotly数据可视化入门</title>
    <url>/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/bg.jpg" alt="bg"></p>
<a id="more"></a>

<h1 id="plotly数据可视化入门"><a href="#plotly数据可视化入门" class="headerlink" title="plotly数据可视化入门"></a>plotly数据可视化入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>conda install plotly</code></p>
<h2 id="包导入"><a href="#包导入" class="headerlink" title="包导入"></a>包导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br></pre></td></tr></table></figure>

<h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'data/datasets/nz_weather.csv'</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>

<h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><h3 id="曲线图和散点图"><a href="#曲线图和散点图" class="headerlink" title="曲线图和散点图"></a>曲线图和散点图</h3><ul>
<li><p>曲线图</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 画线和画点都用Scatter</span></span><br><span class="line">line = go.Scatter(x= data[<span class="string">'DATE'</span>],y= data[<span class="string">'Auckland'</span>],name=<span class="string">"Auckland"</span>)</span><br><span class="line">line2 = go.Scatter(x= data[<span class="string">'DATE'</span>],y= data[<span class="string">'Wellington'</span>],name=<span class="string">"Wellington"</span>)</span><br><span class="line"><span class="comment"># 创建一张图</span></span><br><span class="line">fig = go.Figure([line,line2])</span><br><span class="line">fig.update_layout(</span><br><span class="line">    title=<span class="string">"新西兰天气"</span>,</span><br><span class="line">    xaxis_title=<span class="string">"Date"</span>,</span><br><span class="line">    yaxis_title=<span class="string">"Weather"</span></span><br><span class="line">)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216120950509.png" alt="image-20200216120950509"></p>
<ul>
<li><p>散点图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"data/datasets/iris.csv"</span>)</span><br><span class="line"></span><br><span class="line">data.groupby(<span class="string">"Name"</span>).count().index</span><br><span class="line">name_to_color = &#123;</span><br><span class="line">    <span class="string">"Iris-setosa"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"Iris-versicolor"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"Iris-virginica"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">data[<span class="string">"color"</span>] = data[<span class="string">"Name"</span>].map(name_to_color)</span><br><span class="line"></span><br><span class="line">points = go.Scatter(</span><br><span class="line">    x=data[<span class="string">"SepalLength"</span>],</span><br><span class="line">    y=data[<span class="string">"SepalWidth"</span>],</span><br><span class="line">    mode=<span class="string">"markers"</span>,</span><br><span class="line">    marker=&#123;</span><br><span class="line">        <span class="string">"color"</span>: data[<span class="string">"color"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(points)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216121903720.png" alt="image-20200216121903720"></p>
</li>
</ul>
<h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_2010 = data[(data[<span class="string">"DATE"</span>]&gt;=<span class="string">"2010-01"</span>) &amp; (data[<span class="string">"DATE"</span>]&lt;<span class="string">"2011-01"</span>)]</span><br><span class="line">bar1 = go.Bar(</span><br><span class="line">    x=data_2010[<span class="string">"DATE"</span>],</span><br><span class="line">    y=data_2010[<span class="string">"Auckland"</span>],</span><br><span class="line">    text=data_2010[<span class="string">"Auckland"</span>],</span><br><span class="line">    textposition=<span class="string">"outside"</span>,</span><br><span class="line">    name=<span class="string">"Auckland"</span></span><br><span class="line">)</span><br><span class="line">bar2 = go.Bar(</span><br><span class="line">    x=data_2010[<span class="string">"DATE"</span>],</span><br><span class="line">    y=data_2010[<span class="string">"Wellington"</span>],</span><br><span class="line">    text=data_2010[<span class="string">"Wellington"</span>],</span><br><span class="line">    textposition=<span class="string">"outside"</span>,</span><br><span class="line">    name=<span class="string">"Wellington"</span></span><br><span class="line">)</span><br><span class="line">fig = go.Figure([bar1,bar2])</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216121127543.png" alt="image-20200216121127543"></p>
<h3 id="直方图Histogram"><a href="#直方图Histogram" class="headerlink" title="直方图Histogram"></a>直方图Histogram</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hist = go.Histogram(</span><br><span class="line">    x=data[<span class="string">'Auckland'</span>],</span><br><span class="line">    xbins=&#123;<span class="string">"size"</span>:<span class="number">10</span>&#125;</span><br><span class="line">)</span><br><span class="line">go.Figure(hist)</span><br><span class="line">fig = go.Figure([hist])</span><br><span class="line">fig.update_layout(</span><br><span class="line">    bargap=<span class="number">0.1</span></span><br><span class="line">)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216121345988.png" alt="image-20200216121345988"></p>
<h3 id="3D图"><a href="#3D图" class="headerlink" title="3D图"></a>3D图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"data/datasets/3d-line1.csv"</span>)</span><br><span class="line"></span><br><span class="line">line =  go.Scatter3d(x=data[<span class="string">'x'</span>],y=data[<span class="string">'y'</span>],z=data[<span class="string">'z'</span>])</span><br><span class="line">fig = go.Figure(line)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216122407669.png" alt="image-20200216122407669"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"data/datasets/3d-line1.csv"</span>)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line">line = go.Scatter3d(</span><br><span class="line">    x=data[<span class="string">'x'</span>],</span><br><span class="line">    y=data[<span class="string">'y'</span>],</span><br><span class="line">    z=data[<span class="string">'z'</span>],</span><br><span class="line">    mode=<span class="string">"markers"</span>,</span><br><span class="line">    marker=&#123;</span><br><span class="line">        <span class="string">"size"</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">fig = go.Figure(line)</span><br><span class="line">fig.show()</span><br><span class="line"></span><br><span class="line">line = go.Scatter3d(x=data[<span class="string">'x'</span>], y=data[<span class="string">'y'</span>], z=data[<span class="string">'z'</span>])</span><br><span class="line">fig = go.Figure(line)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216122531369.png" alt="image-20200216122531369"></p>
<h3 id="Surfacer"><a href="#Surfacer" class="headerlink" title="Surfacer"></a>Surfacer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-5</span>, <span class="number">6</span>)</span><br><span class="line">y = np.arange(<span class="number">-5</span>, <span class="number">6</span>)</span><br><span class="line">xv, yv = np.meshgrid(x, y)</span><br><span class="line">z = xv ** <span class="number">2</span> + yv ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">surface = go.Surface(x=xv, y=yv, z=z)</span><br><span class="line">fig = go.Figure(surface)</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216123859439.png" alt="image-20200216123859439"></p>
<h2 id="express模块"><a href="#express模块" class="headerlink" title="express模块"></a>express模块</h2><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为了不用自己构建映射字典，plotly又添加了express模块</span></span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br><span class="line">fig = px.scatter(data,</span><br><span class="line">                 x =<span class="string">"SepalLength"</span>,</span><br><span class="line">                 y=<span class="string">"SepalWidth"</span>,</span><br><span class="line">                 color=<span class="string">'Name'</span></span><br><span class="line">                 )</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/07/python%E8%BF%9B%E9%98%B6/plotly%E5%85%A5%E9%97%A8/image-20200216122254623.png" alt="image-20200216122254623"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建过程</title>
    <url>/2020/02/07/HexoBlog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>​    <img src="/2020/02/07/HexoBlog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/bg.jpg" alt="bg"></p>
<a id="more"></a>

<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node js"></a>安装Node js</h2><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>npm install -g hexo-cli</code></p>
<h1 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h1><h2 id="创建blog"><a href="#创建blog" class="headerlink" title="创建blog"></a>创建blog</h2><p><code>hexo init</code></p>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p><code>hexo new post 第一篇文章</code></p>
<h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 第一篇文章</span><br><span class="line">date: 2020-02-07 16:30:22</span><br><span class="line">tags: [第一个tag]</span><br><span class="line">categories: [第一个分类]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section"># 第一节</span></span><br><span class="line"><span class="section">## 第一小节</span></span><br><span class="line">xxxxx</span><br><span class="line"><span class="section"># 第二节</span></span><br><span class="line"><span class="section">## 第二小节</span></span><br><span class="line">xxxxx</span><br></pre></td></tr></table></figure>



<h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p><code>hexo g</code></p>
<h2 id="启动本地测试服务器"><a href="#启动本地测试服务器" class="headerlink" title="启动本地测试服务器"></a>启动本地测试服务器</h2><p><code>hexo s</code></p>
<h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>配置文件：<code>_config.yml</code></p>
<p>修改：<code>theme: next</code></p>
<h2 id="配置menu"><a href="#配置menu" class="headerlink" title="配置menu"></a>配置menu</h2><h3 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h3><p>配置文件：<code>_config.yml</code></p>
<p>修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;|| home</span><br><span class="line">  about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br><span class="line">  archives: &#x2F;archives&#x2F;|| archive</span><br></pre></td></tr></table></figure>

<h3 id="添加文件夹"><a href="#添加文件夹" class="headerlink" title="添加文件夹"></a>添加文件夹</h3><ul>
<li><p>添加tags</p>
<ul>
<li><p><code>hexo new page tags</code></p>
</li>
<li><p>在<code>source/</code>下生成<code>tags</code>文件</p>
</li>
<li><p>修改<code>index.md</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">type: "tags"</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>添加categories</p>
<ul>
<li><p><code>hexo new page categories</code></p>
</li>
<li><p>在<code>source/</code>下生成<code>categories</code>文件</p>
</li>
<li><p>修改<code>index.md</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">type: "categories"</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>添加about</p>
<ul>
<li><p><code>hexo new page about</code></p>
</li>
<li><p>在<code>source/</code>下生成<code>about</code>文件</p>
</li>
<li><p>修改<code>index.md</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">layout: "about"</span><br><span class="line">title: "About"</span><br><span class="line">comments: true</span><br><span class="line"></span><br><span class="line">自我介绍</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="配置语言"><a href="#配置语言" class="headerlink" title="配置语言"></a>配置语言</h2><p>将根目录下的<code>_config.yml</code>下<code>language: en</code>修改为<code>language: zh-Hans</code></p>
<h1 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h1><h2 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h2><p><code>npm install hexo-generator-searchdb --save</code></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在根目录下的/theme/next/_config.yml文件中添加配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>

<p>在根目录下的/theme/next/_config.yml文件中搜索<code>local_search</code>，将<code>enable</code>改为<code>true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h1 id="添加文章插入图片功能"><a href="#添加文章插入图片功能" class="headerlink" title="添加文章插入图片功能"></a>添加文章插入图片功能</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<h2 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改根目录下的<code>_config.yml</code>中的<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h2><p><code>npm install hexo-deployer-git --save</code></p>
<h2 id="配置根目录的配置文件"><a href="#配置根目录的配置文件" class="headerlink" title="配置根目录的配置文件"></a>配置根目录的配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/weiyd/weiyd.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ssm系列教程4-Mybatis之Interface与Xml参数传递</title>
    <url>/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B4-mybatis%E4%B9%8Binterface%E4%B8%8Exml%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h1 id="1-单复杂数据类型"><a href="#1-单复杂数据类型" class="headerlink" title="1 单复杂数据类型"></a>1 单复杂数据类型</h1><h2 id="1-1-mapper-java"><a href="#1-1-mapper-java" class="headerlink" title="1.1 mapper-java"></a>1.1 mapper-java</h2><p><code>int insert(Girl g);</code> 传参形式单个复杂类型</p>
<h2 id="1-2-mapper-xml"><a href="#1-2-mapper-xml" class="headerlink" title="1.2 mapper-xml"></a>1.2 mapper-xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span></span><br><span class="line">    insert into girl (name,flower,birthday) values (#&#123;name&#125;,#&#123;flower&#125;,#&#123;birthday&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中name，flower，birthday都是Girl的属性名称。</p>
</blockquote>
<h2 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Girl g = <span class="keyword">new</span> Girl();</span><br><span class="line">    g.setName(<span class="string">"林心如"</span>);</span><br><span class="line">    g.setFlower(<span class="string">"霍建花"</span>);</span><br><span class="line">    g.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    mapper.insert(g);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-单基本数据类型"><a href="#2-单基本数据类型" class="headerlink" title="2 单基本数据类型"></a>2 单基本数据类型</h1><h2 id="2-1-mapper-java"><a href="#2-1-mapper-java" class="headerlink" title="2.1 mapper-java"></a>2.1 mapper-java</h2><p><code>Girl queryByID(int id);</code> 传参形式，单个基本类型</p>
<h2 id="2-2-mapper-xml"><a href="#2-2-mapper-xml" class="headerlink" title="2.2 mapper-xml"></a>2.2 mapper-xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByID"</span> <span class="attr">resultType</span>=<span class="string">"Girl"</span>&gt;</span>   </span><br><span class="line">    select * from girl where id = #&#123;id&#125; # id可以为任意</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Girl girl = mapper.queryByID(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> girl.getName().equals(<span class="string">"林心如"</span>);</span><br><span class="line">    </span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-多基本数据类型"><a href="#3-多基本数据类型" class="headerlink" title="3 多基本数据类型"></a>3 多基本数据类型</h1><h2 id="3-1-mapper-java"><a href="#3-1-mapper-java" class="headerlink" title="3.1 mapper-java"></a>3.1 mapper-java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Girl queryByNameFlower(String name,String flower);</span><br></pre></td></tr></table></figure>

<h2 id="3-2-mapper-xml"><a href="#3-2-mapper-xml" class="headerlink" title="3.2 mapper-xml"></a>3.2 mapper-xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByNameFlower"</span> <span class="attr">resultType</span>=<span class="string">"com.lovefit.pojo.Girl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from girl where name = #&#123;param1&#125; and flower = #&#123;param2&#125;--&gt;</span></span><br><span class="line">    select * from girl where name = #&#123;arg0&#125; and flower = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数无论使用arg0、arg1还是param1、param2代码可读性都是很差的。</p>
<h2 id="3-3-使用注解配置参数名"><a href="#3-3-使用注解配置参数名" class="headerlink" title="3.3 使用注解配置参数名"></a>3.3 使用注解配置参数名</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Girl <span class="title">queryByNameFlower</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name,@<span class="title">Param</span><span class="params">(<span class="string">"flower"</span>)</span> String flower)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByNameFlower"</span> <span class="attr">resultType</span>=<span class="string">"com.lovefit.pojo.Girl"</span>&gt;</span></span><br><span class="line">	select * from girl where name = #&#123;name&#125; and flower = #&#123;flower&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Girl girl = mapper.queryByNameFlower(<span class="string">"林心如"</span>,<span class="string">"茉莉花"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> girl.getName().equals(<span class="string">"林心如"</span>);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-单Map数据类型"><a href="#4-单Map数据类型" class="headerlink" title="4 单Map数据类型"></a>4 单Map数据类型</h1><h2 id="4-1-mapper-java"><a href="#4-1-mapper-java" class="headerlink" title="4.1 mapper-java"></a>4.1 mapper-java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Girl&gt; <span class="title">queryByNameFlower1</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-mapper-xml"><a href="#4-2-mapper-xml" class="headerlink" title="4.2 mapper-xml"></a>4.2 mapper-xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByNameFlower1"</span> <span class="attr">resultType</span>=<span class="string">"com.lovefit.pojo.Girl"</span>&gt;</span></span><br><span class="line">    select * from girl where name = #&#123;name&#125; and flower = #&#123;flower&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"林心如"</span>);</span><br><span class="line">    map.put(<span class="string">"flower"</span>,<span class="string">"霍建花"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Girl&gt; girl2 = mapper.queryByNameFlower1(map);</span><br><span class="line">    <span class="keyword">assert</span> girl2.getName().equals(<span class="string">"林心如"</span>);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5多复杂数据类型"><a href="#5多复杂数据类型" class="headerlink" title="5多复杂数据类型"></a>5多复杂数据类型</h1><h2 id="5-1-mapper-java"><a href="#5-1-mapper-java" class="headerlink" title="5.1 mapper-java"></a>5.1 mapper-java</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Girl&gt; queryByAB(@Param(&quot;a&quot;) A a,@Param(&quot;b&quot;) B b);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String flower;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlower</span><span class="params">(String flower)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flower = flower;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-mapper-xml"><a href="#5-2-mapper-xml" class="headerlink" title="5.2 mapper-xml"></a>5.2 mapper-xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryByAB&quot; resultType&#x3D;&quot;com.lovefit.pojo.Girl&quot;&gt;</span><br><span class="line">    #select * from girl where name &#x3D; #&#123;param1.name&#125; and flower &#x3D; #&#123;param2.flower&#125;</span><br><span class="line">    select * from girl where name &#x3D; #&#123;a.name&#125; and flower &#x3D; #&#123;b.flower&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3 测试"></a>5.3 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    a.setName(<span class="string">"林心如"</span>);</span><br><span class="line"></span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    b.setFlower(<span class="string">"霍建花"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Girl&gt; girl = mapper.queryByAB(a,b);</span><br><span class="line">    <span class="keyword">assert</span> girl.get(<span class="number">0</span>).getName().equals(<span class="string">"林心如"</span>);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm系列教程3-Mybatis之配置</title>
    <url>/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B3-mybatis%E4%B9%8B%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Mybatis的配置文件"><a href="#Mybatis的配置文件" class="headerlink" title="Mybatis的配置文件"></a>Mybatis的配置文件</h1><p>​        在mybatis入门实践中介绍了MybatisUtil类，其中resource变量配置了mybatis的配置文件路径，如果只有名字没有路径的话，默认在项目的sources root目录下（本项目指定为<code>src/main/resources</code>）下查找。</p>
<ul>
<li><p>MybatisUtil类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String resource=<span class="string">"mybatis.cfg.xml"</span>;</span><br><span class="line">        InputStream in =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(in !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mybatis.cfg.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--优先使用jdbc.properties里面的属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource的优先级最高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--缓存开启--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下划线风格转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--类的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册一个简写的类名，可以再其他mapper文件中被引用--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不推荐使用,有前缀很清楚--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="com.lovefit.pojo.Girl" alias="girl"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--直接注册整个包，该包之下的所有类都生效，默认规则为简写类名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name="com.lovefit.pojo"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据类型转换--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeHandlers&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/typeHandlers&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis的属性配置--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis?&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT"/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要写. 要写斜杠--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种：通过类路径引入xml文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="com/lovefit/mapper/GirlMapper.xml"/&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--第二种：通过URL 路径协议 引入xml文件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper url="file:\\C:/Users/WYD181/Desktop/SSM_Study/mybatis002/src/main/resources/com/lovefit/mapper/GirlMapper.xml"/&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--第三种：通过类的接口全限定名引入，必须保持我们的接口和mapper.xml在同包之下--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="com.lovefit.mapper.GirlMapper"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第四种：引入一个包的方式，以后只要是在这个包下新建Mapper，不需要重新引入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.lovefit.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="1-properties"><a href="#1-properties" class="headerlink" title="1 properties"></a>1 properties</h2><p>​        <code>properties</code>属性可以让mybatis配置文件读取mybatis配置文件需要的属性值（方式：<code>&lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;</code>），便于动态的修改mybatis的配置文件。</p>
<ul>
<li><p>用法1</p>
<ul>
<li><pre><code class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>
    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>
    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>
    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>
    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT"</span>/&gt;</span>
<span class="tag">&lt;/<span class="name">properties</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 用法2</span><br><span class="line"></span><br><span class="line">  - 配置&#96;&#96;properties&#96;&#96;的resource字段，resource是单独配置属性值的properties文件。</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;properties</span><br><span class="line">    username &#x3D; root</span><br><span class="line">    password&#x3D;root</span><br><span class="line">    driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">    url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?&amp;characterEncoding&#x3D;utf8&amp;serverTimezone&#x3D;GMT</span><br></pre></td></tr></table></figure></span></code></pre>
</li>
<li><pre><code class="xml"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span>
<span class="tag">&lt;/<span class="name">properties</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 优先级比较</span><br><span class="line"></span><br><span class="line">  - properties resource&gt; properties value</span><br><span class="line"></span><br><span class="line">## 2 settings</span><br><span class="line"></span><br><span class="line">mybatis的设置配置，常用的配置如下（具体可以查看</span><br><span class="line"></span><br><span class="line">[官网]: http:&#x2F;&#x2F;www.mybatis.org&#x2F;mybatis-3&#x2F;zh&#x2F;configuration.html#settings</span><br><span class="line"></span><br><span class="line">）：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;!--缓存开启--&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;multipleResultSetsEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;useColumnLabel&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;useGeneratedKeys&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;autoMappingBehavior&quot; value&#x3D;&quot;PARTIAL&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;autoMappingUnknownColumnBehavior&quot; value&#x3D;&quot;WARNING&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;defaultExecutorType&quot; value&#x3D;&quot;SIMPLE&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;defaultStatementTimeout&quot; value&#x3D;&quot;25&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;defaultFetchSize&quot; value&#x3D;&quot;100&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;safeRowBoundsEnabled&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--下划线风格转换为驼峰--&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;localCacheScope&quot; value&#x3D;&quot;SESSION&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;jdbcTypeForNull&quot; value&#x3D;&quot;OTHER&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;lazyLoadTriggerMethods&quot; value&#x3D;&quot;equals,clone,hashCode,toString&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;LOG4J&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure></span>


</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="3-typeAliases"><a href="#3-typeAliases" class="headerlink" title="3 typeAliases"></a>3 typeAliases</h2><p>typeAliases是给PoJo类起一个别名，方便mapper.xml调用不用写类的全名路径。</p>
<ul>
<li><p>用法1</p>
<ul>
<li><p><code>&lt;typeAlias type=&quot;com.lovefit.pojo.Girl&quot; alias=&quot;girl_alias&quot;&gt;&lt;/typeAlias&gt;</code></p>
</li>
<li><p>在GirlMapper.xml中引用</p>
<ul>
<li><pre><code class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lovefit.mapper.GirlMapper"</span>&gt;</span>
    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByID"</span> <span class="attr">resultType</span>=<span class="string">"girl_alias"</span>&gt;</span>
        select * from girl where id = #{id}
    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>
<span class="tag">&lt;/<span class="name">mapper</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 用法2</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&lt;package name&#x3D;&quot;com.lovefit.pojo&quot;&#x2F;&gt;&#96;&#96;</span><br><span class="line"></span><br><span class="line">  - 在GirlMapper.xml中引用,其中resultType直接指定com.lovefit.pojo的类名即可（不区分大小写）。</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;xml</span><br><span class="line">      &lt;mapper namespace&#x3D;&quot;com.lovefit.mapper.GirlMapper&quot;&gt;</span><br><span class="line">          &lt;select id&#x3D;&quot;queryByID&quot; resultType&#x3D;&quot;girl&quot;&gt;</span><br><span class="line">              select * from girl where id &#x3D; #&#123;id&#125;</span><br><span class="line">          &lt;&#x2F;select&gt;</span><br><span class="line">      &lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></span>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-environments"><a href="#4-environments" class="headerlink" title="4 environments"></a>4 environments</h2><p>environments是配置mybatis的运行环境基本信息的，可以配置多种环境。</p>
<ul>
<li>需要的基本字段<ul>
<li>url：连接字符串</li>
<li>driver：驱动</li>
<li>username：用户名</li>
<li>password：密码</li>
</ul>
</li>
<li>配置文件可以直接配置基本字段的值也可以通过引用的方式来配置。建议使用引用的方式进行配置。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis?&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-mappers"><a href="#5-mappers" class="headerlink" title="5 mappers"></a>5 mappers</h2><p>mappers是指定各个Pojo对应的mapper文件的位置。</p>
<ul>
<li><p>配置方法1：</p>
<ul>
<li><code>&lt;mapper resource=&quot;com/lovefit/mapper/GirlMapper.xml&quot;/&gt;</code></li>
<li>配置的路径为resource下面的具体mapper.xml文件，有多少个文件就需要添加多少个配置。</li>
</ul>
</li>
<li><p>配置方法2：</p>
<ul>
<li><pre><code class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:\\C:/Users/WYD181/Desktop/SSM_Study/mybatis002/src/main/resources/com/lovefit/mapper/GirlMapper.xml"</span>/&gt;</span></code></pre>
</li>
<li><p>配置路径为各个mapper文件的URL路径协议地址，不方便使用，因为项目在不同电脑的路径不一定相同。</p>
</li>
</ul>
</li>
<li><p>配置方法3：</p>
<ul>
<li><code>&lt;mapper class=&quot;com.lovefit.mapper.GirlMapper&quot;&gt;&lt;/mapper&gt;</code></li>
<li>通过类的接口引入，必须保证<code>GirlMapper.java</code>路径和<code>GirlMapper.xml</code>路径是对应的。比如类路径是<code>src/main/java/com/lovefit/mapper/GirlMapper</code>那么要求GirlMapper.xml路径是<code>src/main/resource/com/lovefit/mapper/GirlMapper</code></li>
</ul>
</li>
<li><p>配置方法4：</p>
<ul>
<li><code>&lt;package name=&quot;com.lovefit.mapper&quot;/&gt;</code></li>
<li>配置方法3需要将所有配置文件手动配置，方法4是自动将方法三中的对应mapper文件夹配置一下就可以，这样子可以减少配置复杂度。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm系列教程3-Mybatis之配置</title>
    <url>/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/demo/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm系列教程2-Mybatis入门实践</title>
    <url>/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>​        MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p>
<h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1 新建项目"></a>1 新建项目</h2><ul>
<li><p>选择模板</p>
<img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838352044.png" alt="1567838352044" style="zoom: 80%;">
</li>
<li><p>配置组织名与项目名</p>
<img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838117120.png" alt="1567838117120" style="zoom:50%;">
</li>
<li><p>配置Maven（提前配置好的话可选默认）</p>
<p><img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838165970.png" alt="1567838165970"></p>
</li>
<li><p>配置项目位置</p>
<p><img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838195617.png" alt="1567838195617"></p>
</li>
<li><p>Maven构建</p>
<p><img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838594374.png" alt="1567838594374"></p>
</li>
</ul>
<h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2 安装依赖"></a>2 安装依赖</h2><ul>
<li><p>maven搜索依赖包</p>
<p><img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838710837.png" alt="1567838710837"></p>
</li>
<li><p>安装Mybatis依赖</p>
<ul>
<li><p><img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-mybatis%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/1567838742365.png" alt="1567838742365"></p>
</li>
<li><pre><code>&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
    &lt;version&gt;3.5.2&lt;/version&gt;
&lt;/dependency&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 复制到pom文件</span><br><span class="line"></span><br><span class="line">- 安装mysql依赖</span><br><span class="line"></span><br><span class="line">  - 版本号选择与使用的数据保持一致</span><br><span class="line"></span><br><span class="line">  - ![1567838823839](.&#x2F;1567838823839.png)</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure>
&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;8.0.15&lt;/version&gt;
&lt;/dependency&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 复制到pom文件</span><br><span class="line"></span><br><span class="line">- 检查是否导入</span><br><span class="line"></span><br><span class="line">  ![1567839086182](.&#x2F;1567839086182.png)</span><br><span class="line"></span><br><span class="line">## 3 配置映射</span><br><span class="line"></span><br><span class="line">### 3.1 MybatisUtil类</span><br><span class="line"></span><br><span class="line">- 在com.lovefit下新建util.MybatisUtil类</span><br><span class="line"></span><br><span class="line">- ![1567839285122](.&#x2F;1567839285122.png)</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">  package com.lovefit.util;</span><br><span class="line">  </span><br><span class="line">  import org.apache.ibatis.io.Resources;</span><br><span class="line">  import org.apache.ibatis.session.SqlSession;</span><br><span class="line">  import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">  import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">  </span><br><span class="line">  import java.io.IOException;</span><br><span class="line">  import java.io.InputStream;</span><br><span class="line">  </span><br><span class="line">  public class MybatisUtil &#123;</span><br><span class="line">  </span><br><span class="line">      private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">  </span><br><span class="line">      static &#123;</span><br><span class="line">          String resource&#x3D;&quot;mybatis.cfg.xml&quot;;</span><br><span class="line">          InputStream in &#x3D;null;</span><br><span class="line">          try &#123;</span><br><span class="line">              in &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">              sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(in);</span><br><span class="line">          &#125; catch (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;finally &#123;</span><br><span class="line">              if(in !&#x3D;null)&#123;</span><br><span class="line">                  try &#123;</span><br><span class="line">                      in.close();</span><br><span class="line">                  &#125; catch (IOException e) &#123;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public static SqlSession getSession()&#123;</span><br><span class="line">          return sqlSessionFactory.openSession();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ul>
<h3 id="3-2-Pojo类"><a href="#3-2-Pojo类" class="headerlink" title="3.2 Pojo类"></a>3.2 Pojo类</h3><ul>
<li><p>新建pojo.Girl类</p>
<ul>
<li><pre><code class="java"><span class="keyword">package</span> com.lovefit.pojo;

<span class="keyword">import</span> java.util.Date;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>{

    <span class="keyword">private</span> <span class="keyword">long</span> id;

    <span class="keyword">private</span> String name;

    <span class="keyword">private</span> String flower;

    <span class="keyword">private</span> Date birthday;

</code></pre>
</li>
</ul>
</li>
</ul>
<pre><code>    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFlower() {
        return flower;
    }

    public void setFlower(String flower) {
        this.flower = flower;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
}

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 需要封装字段</span><br><span class="line"></span><br><span class="line">### 3.3 Mapper接口</span><br><span class="line"></span><br><span class="line">- 在&#96;&#96;src\main\java\com\lovefit&#96;&#96;下新建mapper文件夹</span><br><span class="line"></span><br><span class="line">- 在mapper文件夹下新建GirlMapper.java文件</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;java</span><br><span class="line">    package com.lovefit.mapper;</span><br><span class="line">    import com.lovefit.pojo.Girl;</span><br><span class="line">    </span><br><span class="line">    public interface GirlMapper &#123;</span><br><span class="line">    </span><br><span class="line">        int insert(Girl g);</span><br><span class="line"></span><br><span class="line">        Girl queryByID(int id);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="3-4-配置MybatisUtil类中的配置文件"><a href="#3-4-配置MybatisUtil类中的配置文件" class="headerlink" title="3.4 配置MybatisUtil类中的配置文件"></a>3.4 配置MybatisUtil类中的配置文件</h3><ul>
<li><p>新建resources文件夹与mybatis.cfg.xml</p>
<ul>
<li><p>在src/main/java新建resources文件夹</p>
</li>
<li><p>sources文件夹配置为source root </p>
</li>
<li><p>在sources文件夹下新建mybatis.cfg.xml文件</p>
</li>
<li><p>在mybatis.cfg.xml输入以下内容</p>
<ul>
<li><pre><code class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span>
<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span>
        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span>
            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span>
            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"UNPOOLED"</span>&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT"</span>/&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>
                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>
        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span>

    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>
        <span class="comment">&lt;!--不要写. 要写斜杠--&gt;</span>
        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/lovefit/mapper/GirlMapper.xml"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>
<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 其中url是连接字符串，使用mysql8以上的版本话需要配置时区</span><br><span class="line"></span><br><span class="line">    - mappers是需要映射的Pojo</span><br><span class="line"></span><br><span class="line">- 新建mapper文件夹</span><br><span class="line"></span><br><span class="line">  - 在src&#x2F;main&#x2F;resources下新建com&#x2F;lovefit&#x2F;mapper文件夹</span><br><span class="line"></span><br><span class="line">  - mapper文件夹下新建GirlMapper.xml文件</span><br><span class="line"></span><br><span class="line">  - GirlMapper.xml文件输入以下内容</span><br><span class="line"></span><br><span class="line">    - &#96;&#96;&#96;xml</span><br><span class="line">      &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">      &lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;mapper namespace&#x3D;&quot;com.lovefit.mapper.GirlMapper&quot;&gt;</span><br><span class="line">      </span><br><span class="line">          &lt;insert id&#x3D;&quot;insert&quot;&gt;</span><br><span class="line">              insert into girl (name,flower,birthday) values (#&#123;name&#125;,#&#123;flower&#125;,#&#123;birthday&#125;)</span><br><span class="line">          &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">          &lt;select id&#x3D;&quot;queryByID&quot; resultType&#x3D;&quot;com.lovefit.pojo.Girl&quot;&gt;</span><br><span class="line">              select * from girl where id &#x3D; #&#123;id&#125;</span><br><span class="line">          &lt;&#x2F;select&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></span></code></pre>
</li>
</ul>
</li>
<li><p>namespace是需要映射的接口</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5 测试"></a>3.5 测试</h3><ul>
<li><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>{

  <span class="meta">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>
<span class="function">  </span>{
      SqlSession sqlSession = MybatisUtil.getSession();

      GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;

      Girl g = <span class="keyword">new</span> Girl();
      g.setName(<span class="string">"林心如"</span>);
      g.setFlower(<span class="string">"霍建花"</span>);
      g.setBirthday(<span class="keyword">new</span> Date());

      mapper.insert(g);
      sqlSession.commit();

      sqlSession.close();
  }

  <span class="meta">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>
<span class="function">  </span>{
      SqlSession sqlSession = MybatisUtil.getSession();

      GirlMapper mapper = sqlSession.getMapper(GirlMapper<span class="class">.<span class="keyword">class</span>)</span>;
      Girl girl = mapper.queryByID(<span class="number">1</span>);

      <span class="keyword">assert</span> girl.getName().equals(<span class="string">"林心如"</span>);
      sqlSession.close();
  }
}
&lt;!--￼<span class="number">4</span>--&gt;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm系列教程1-Maven基本使用</title>
    <url>/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1-maven/</url>
    <content><![CDATA[<h1 id="1-Maven"><a href="#1-Maven" class="headerlink" title="1. Maven"></a>1. Maven</h1><h2 id="1-1-什么是Maven"><a href="#1-1-什么是Maven" class="headerlink" title="1.1 什么是Maven"></a>1.1 什么是Maven</h2><p>​        由Apache公司推出的一个管理我们项目的一个工具，ant演变过来的。是一个自动化构建工具。</p>
<h2 id="1-2-pom"><a href="#1-2-pom" class="headerlink" title="1.2 pom"></a>1.2 pom</h2><p>project object model，工程对象模型，pom.xml。</p>
<h3 id="1-2-1-pom文件配置"><a href="#1-2-1-pom文件配置" class="headerlink" title="1.2.1 pom文件配置"></a>1.2.1 pom文件配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lovefit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性的定义--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目构建使用的字符编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编译源代码的版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--目标代码版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--依赖集合--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-1-安装与配置"><a href="#2-1-安装与配置" class="headerlink" title="2.1 安装与配置"></a>2.1 安装与配置</h2><h3 id="2-1-1-配置setting"><a href="#2-1-1-配置setting" class="headerlink" title="2.1.1 配置setting"></a>2.1.1 配置setting</h3><ul>
<li><p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">"License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they're all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It's normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile</span></span><br><span class="line"><span class="comment">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="comment">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="comment">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="comment">     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.</span></span><br><span class="line"><span class="comment">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="comment">     | to accomplish, particularly when you only have a list of profile id's for debug.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;repositories&gt;</span></span><br><span class="line"><span class="comment">        &lt;repository&gt;</span></span><br><span class="line"><span class="comment">          &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><br><span class="line"><span class="comment">          &lt;layout&gt;default&lt;/layout&gt;</span></span><br><span class="line"><span class="comment">          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class="line"><span class="comment">        &lt;/repository&gt;</span></span><br><span class="line"><span class="comment">      &lt;/repositories&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',</span></span><br><span class="line"><span class="comment">     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration</span></span><br><span class="line"><span class="comment">     | might hypothetically look like:</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     | &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     |   &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">     | &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> If you just wanted to inject this configuration whenever someone set 'target-env' to</span></span><br><span class="line"><span class="comment">     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;env-dev&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;property&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;target-env&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;value&gt;dev&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;</span></span><br><span class="line"><span class="comment">      &lt;/properties&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- activeProfiles</span></span><br><span class="line"><span class="comment">   | List of profiles that are active for all builds.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;activeProfiles&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">  &lt;/activeProfiles&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>手动安装Maven需要配置setting的jar包存放位置。</p>
<p><code>&lt;localRepository&gt;D:/reposi&lt;/localRepository&gt;</code></p>
</li>
<li><p>配置中央环境，换言之更换源地址。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-1-IDEA新建项目"><a href="#3-1-IDEA新建项目" class="headerlink" title="3.1 IDEA新建项目"></a>3.1 IDEA新建项目</h2><h3 id="3-1-1-IDEA的配置"><a href="#3-1-1-IDEA的配置" class="headerlink" title="3.1.1 IDEA的配置"></a>3.1.1 IDEA的配置</h3><ul>
<li><p>配置setting的Maven路径与配置文件路径</p>
<img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1-maven/1567820129249.png" alt="1567820129249" style="zoom:50%;">

<ul>
<li><p>实际maven新建项目时候 会确认maven的版本</p>
<img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1-maven/1567821066994.png" alt="1567821066994" style="zoom: 50%;">
</li>
</ul>
</li>
<li><p>IDEA 常用的骨架</p>
<ul>
<li><code>org.apache.maven.archetypes:maven-archtype-site-quickstart</code></li>
<li><code>org.apache.maven.archetypes:maven-archtype-site-webapp</code></li>
</ul>
</li>
</ul>
<h3 id="3-1-2-maven构建"><a href="#3-1-2-maven构建" class="headerlink" title="3.1.2 maven构建"></a>3.1.2 maven构建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\MySoftWare\Java\jdk1<span class="number">.8</span><span class="number">.0_144</span>\bin\java.exe -Dmaven.multiModuleProjectDirectory=C:\Users\WYD181\AppData\Local\Temp\archetypetmp <span class="string">"-Dmaven.home=C:\ad\JetBrains\IntelliJ IDEA 2019.2.1\plugins\maven\lib\maven3"</span> <span class="string">"-Dclassworlds.conf=C:\ad\JetBrains\IntelliJ IDEA 2019.2.1\plugins\maven\lib\maven3\bin\m2.conf"</span> <span class="string">"-Dmaven.ext.class.path=C:\ad\JetBrains\IntelliJ IDEA 2019.2.1\plugins\maven\lib\maven-event-listener.jar"</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">"C:\ad\JetBrains\IntelliJ IDEA 2019.2.1\plugins\maven\lib\maven3\boot\plexus-classworlds-2.6.0.jar"</span> org.codehaus.classworlds.Launcher -Didea.version2019<span class="number">.2</span><span class="number">.1</span> -DinteractiveMode=<span class="keyword">false</span> -DgroupId=com.lovefit -DartifactId=hello -Dversion=<span class="number">1.0</span>-SNAPSHOT -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=RELEASE org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/maven-metadata.xml (918 B at 392 B/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.1.2/maven-archetype-plugin-3.1.2.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.1.2/maven-archetype-plugin-3.1.2.pom (11 kB at 26 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/maven-archetype/3.1.2/maven-archetype-3.1.2.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/maven-archetype/3.1.2/maven-archetype-3.1.2.pom (12 kB at 29 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/maven-parent/33/maven-parent-33.pom (44 kB at 72 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/apache/21/apache-21.pom (17 kB at 43 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.1.2/maven-archetype-plugin-3.1.2.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-archetype-plugin/3.1.2/maven-archetype-plugin-3.1.2.jar (97 kB at 48 kB/s)</span></span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ------------------&lt; org.apache.maven:standalone-pom &gt;-------------------</span><br><span class="line">[INFO] <span class="function">Building Maven Stub <span class="title">Project</span> <span class="params">(No POM)</span> 1</span></span><br><span class="line"><span class="function">[INFO] --------------------------------[ pom ]---------------------------------</span></span><br><span class="line"><span class="function">[INFO] </span></span><br><span class="line"><span class="function">[INFO] &gt;&gt;&gt; maven-archetype-plugin:3.1.2:<span class="title">generate</span> <span class="params">(<span class="keyword">default</span>-cli)</span> &gt; generate-sources @ standalone-pom &gt;&gt;&gt;</span></span><br><span class="line"><span class="function">[INFO] </span></span><br><span class="line"><span class="function">[INFO] &lt;&lt;&lt; maven-archetype-plugin:3.1.2:<span class="title">generate</span> <span class="params">(<span class="keyword">default</span>-cli)</span> &lt; generate-sources @ standalone-pom &lt;&lt;&lt;</span></span><br><span class="line"><span class="function">[INFO] </span></span><br><span class="line"><span class="function">[INFO] </span></span><br><span class="line"><span class="function">[INFO] --- maven-archetype-plugin:3.1.2:<span class="title">generate</span> <span class="params">(<span class="keyword">default</span>-cli)</span> @ standalone-pom ---</span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/3.1.2/archetype-catalog-3.1.2.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/3.1.2/archetype-catalog-3.1.2.pom (2.0 kB at 1.6 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-models/3.1.2/archetype-models-3.1.2.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-models/3.1.2/archetype-models-3.1.2.pom (2.8 kB at 2.7 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.2.0/plexus-utils-3.2.0.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.2.0/plexus-utils-3.2.0.pom (4.8 kB at 8.1 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom (23 kB at 19 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-descriptor/3.1.2/archetype-descriptor-3.1.2.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-descriptor/3.1.2/archetype-descriptor-3.1.2.pom (2.0 kB at 4.8 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-common/3.1.2/archetype-common-3.1.2.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-common/3.1.2/archetype-common-3.1.2.pom (18 kB at 22 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.16/groovy-2.4.16.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.16/groovy-2.4.16.pom (19 kB at 24 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.pom (6.3 kB at 7.9 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/net/sourceforge/jchardet/jchardet/1.0/jchardet-1.0.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/net/sourceforge/jchardet/jchardet/1.0/jchardet-1.0.pom (1.3 kB at 3.2 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.pom (770 B at 2.0 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.7.1/plexus-containers-1.7.1.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-containers/1.7.1/plexus-containers-1.7.1.pom (5.0 kB at 8.1 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.pom (4.9 kB at 12 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/31/maven-shared-components-31.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/31/maven-shared-components-31.pom (5.1 kB at 12 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/maven-parent/31/maven-parent-31.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/maven-parent/31/maven-parent-31.pom (43 kB at 32 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/apache/19/apache-19.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/apache/19/apache-19.pom (15 kB at 27 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.pom (5.6 kB at 14 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/30/maven-shared-components-30.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/30/maven-shared-components-30.pom (4.6 kB at 5.7 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/maven-parent/30/maven-parent-30.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/maven-parent/30/maven-parent-30.pom (41 kB at 18 kB/s)</span></span></span><br><span class="line"><span class="function">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-artifact-transfer/0.11.0/maven-artifact-transfer-0.11.0.pom</span></span></span><br><span class="line"><span class="function">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-artifact-transfer/0.11.0/maven-artifact-transfer-0.11.0.pom (11 kB at 11 kB/s)</span></span></span><br><span class="line"><span class="function">[IJ]-1-ARTIFACT_DOWNLOADING-[IJ]-path</span>=-[IJ]-artifactCoord=org.apache.maven.shared:maven-shared-components:pom:<span class="number">33</span>-[IJ]-error=</span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/33/maven-shared-components-33.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-components/33/maven-shared-components-33.pom (5.1 kB at 9.1 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.0.1/maven-common-artifact-filters-3.0.1.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.0.1/maven-common-artifact-filters-3.0.1.pom (4.8 kB at 12 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.1.0/maven-shared-utils-3.1.0.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.1.0/maven-shared-utils-3.1.0.pom (5.0 kB at 12 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/commons-codec/commons-codec/1.11/commons-codec-1.11.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/commons-codec/commons-codec/1.11/commons-codec-1.11.pom (14 kB at 25 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/commons/commons-parent/42/commons-parent-42.pom (68 kB at 20 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.pom (2.7 kB at 6.4 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.5/slf4j-parent-1.7.5.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/slf4j/slf4j-parent/1.7.5/slf4j-parent-1.7.5.pom (12 kB at 21 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/3.3.3/wagon-provider-api-3.3.3.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/3.3.3/wagon-provider-api-3.3.3.pom (1.9 kB at 5.0 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon/3.3.3/wagon-3.3.3.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon/3.3.3/wagon-3.3.3.pom (21 kB at 27 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-6/plexus-interactivity-api-1.0-alpha-6.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-6/plexus-interactivity-api-1.0-alpha-6.pom (726 B at 1.9 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity/1.0-alpha-6/plexus-interactivity-1.0-alpha-6.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity/1.0-alpha-6/plexus-interactivity-1.0-alpha-6.pom (1.1 kB at 2.6 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.9/plexus-components-1.1.9.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-components/1.1.9/plexus-components-1.1.9.pom (2.4 kB at 6.1 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.0/maven-script-interpreter-1.0.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.0/maven-script-interpreter-1.0.pom (3.8 kB at 9.1 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/1.8.3/groovy-1.8.3.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/1.8.3/groovy-1.8.3.pom (32 kB at 40 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/antlr/antlr/2.7.7/antlr-2.7.7.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/antlr/antlr/2.7.7/antlr-2.7.7.pom (632 B at 1.6 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ant/ant/1.8.1/ant-1.8.1.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ant/ant/1.8.1/ant-1.8.1.pom (8.8 kB at 11 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ant/ant-parent/1.8.1/ant-parent-1.8.1.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ant/ant-parent/1.8.1/ant-parent-1.8.1.pom (4.3 kB at 10.0 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-descriptor/3.1.2/archetype-descriptor-3.1.2.jar</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.16/groovy-2.4.16.jar</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/3.1.2/archetype-catalog-3.1.2.jar</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-common/3.1.2/archetype-common-3.1.2.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/3.1.2/archetype-catalog-3.1.2.jar (19 kB at 20 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/net/sourceforge/jchardet/jchardet/1.0/jchardet-1.0.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-descriptor/3.1.2/archetype-descriptor-3.1.2.jar (24 kB at 23 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/net/sourceforge/jchardet/jchardet/1.0/jchardet-1.0.jar (27 kB at 20 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/3.3.3/wagon-provider-api-3.3.3.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-component-annotations/1.7.1/plexus-component-annotations-1.7.1.jar (4.3 kB at 3.0 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.2.0/plexus-utils-3.2.0.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-common/3.1.2/archetype-common-3.1.2.jar (185 kB at 127 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-6/plexus-interactivity-api-1.0-alpha-6.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-6/plexus-interactivity-api-1.0-alpha-6.jar (12 kB at 6.5 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/wagon/wagon-provider-api/3.3.3/wagon-provider-api-3.3.3.jar (56 kB at 30 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-invoker/3.0.1/maven-invoker-3.0.1.jar (33 kB at 15 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-artifact-transfer/0.11.0/maven-artifact-transfer-0.11.0.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-artifact-transfer/0.11.0/maven-artifact-transfer-0.11.0.jar (128 kB at 46 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.0.1/maven-common-artifact-filters-3.0.1.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/3.2.1/maven-shared-utils-3.2.1.jar (167 kB at 58 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/commons-codec/commons-codec/1.11/commons-codec-1.11.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-common-artifact-filters/3.0.1/maven-common-artifact-filters-3.0.1.jar (61 kB at 18 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar (26 kB at 7.0 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.0/maven-script-interpreter-1.0.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/commons-codec/commons-codec/1.11/commons-codec-1.11.jar (335 kB at 85 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ant/ant/1.8.1/ant-1.8.1.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/shared/maven-script-interpreter/1.0/maven-script-interpreter-1.0.jar (21 kB at 5.0 kB/s)</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.2.0/plexus-utils-3.2.0.jar (263 kB at 57 kB/s)</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ant/ant/1.8.1/ant-1.8.1.jar (1.5 MB at 102 kB/s)</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar (1.3 MB at 62 kB/s)</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/2.4.16/groovy-2.4.16.jar (4.7 MB at 111 kB/s)</span></span><br><span class="line">[INFO] Generating project in Batch mode</span><br><span class="line">[INFO] Archetype repository not defined. Using the one from [org.apache.maven.archetypes:maven-archetype-quickstart:<span class="number">1.4</span>] found in catalog remote</span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/maven-metadata.xml</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/maven-metadata.xml (589 B at 1.5 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.4/maven-archetype-quickstart-1.4.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.4/maven-archetype-quickstart-1.4.pom (1.6 kB at 4.2 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-bundles/1.4/maven-archetype-bundles-1.4.pom</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-bundles/1.4/maven-archetype-bundles-1.4.pom (4.5 kB at 12 kB/s)</span></span><br><span class="line">Downloading from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.4/maven-archetype-quickstart-1.4.jar</span></span><br><span class="line">Downloaded from central: https:<span class="comment">//repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.4/maven-archetype-quickstart-1.4.jar (7.1 kB at 19 kB/s)</span></span><br><span class="line">[INFO] ----------------------------------------------------------------------------</span><br><span class="line">[INFO] Using following parameters <span class="keyword">for</span> creating project from Archetype: maven-archetype-quickstart:RELEASE</span><br><span class="line">[INFO] ----------------------------------------------------------------------------</span><br><span class="line">[INFO] Parameter: groupId, Value: com.lovefit</span><br><span class="line">[INFO] Parameter: artifactId, Value: hello</span><br><span class="line">[INFO] Parameter: version, Value: <span class="number">1.0</span>-SNAPSHOT</span><br><span class="line">[INFO] Parameter: <span class="keyword">package</span>, Value: com.lovefit</span><br><span class="line">[INFO] Parameter: packageInPathFormat, Value: com/lovefit</span><br><span class="line">[INFO] Parameter: <span class="keyword">package</span>, Value: com.lovefit</span><br><span class="line">[INFO] Parameter: version, Value: <span class="number">1.0</span>-SNAPSHOT</span><br><span class="line">[INFO] Parameter: groupId, Value: com.lovefit</span><br><span class="line">[INFO] Parameter: artifactId, Value: hello</span><br><span class="line">[INFO] Project created from Archetype in dir: C:\Users\WYD181\AppData\Local\Temp\archetypetmp\hello</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">02</span>:<span class="number">53</span> min</span><br><span class="line">[INFO] Finished at: <span class="number">2019</span>-<span class="number">09</span>-<span class="number">07</span>T09:<span class="number">57</span>:<span class="number">12</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<ul>
<li><p>构建完成的目录</p>
<p><img src="/2019/05/01/java/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/ssm%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1-maven/1567821522189.png" alt="1567821522189"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows中netsh命令的基本使用</title>
    <url>/2018/08/17/system/windows/windows%E7%9A%84netsh%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="本机端口转换"><a href="#本机端口转换" class="headerlink" title="本机端口转换"></a>本机端口转换</h2><blockquote>
<p><code>netsh interface portproxy add v4tov4 listenport=3309 listenaddress=0.0.0.0 connectport=3389 connectaddress=127.0.0.1</code></p>
</blockquote>
<blockquote>
<p>通过<code>netstat -ano | findstr :3309</code>查看端口是否启动</p>
</blockquote>
<h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><blockquote>
<p><code>netsh advfirewall firewall add rule name=”forwarded_RDPport_3309” protocol=TCP dir=in localip=127.0.0.1  localport=3389 action=allow</code></p>
</blockquote>
<h2 id="查看全部代理"><a href="#查看全部代理" class="headerlink" title="查看全部代理"></a>查看全部代理</h2><blockquote>
<p><code>netsh interface portproxy show all</code></p>
</blockquote>
<h2 id="dump显示代理"><a href="#dump显示代理" class="headerlink" title="dump显示代理"></a>dump显示代理</h2><blockquote>
<p><code>netsh interface portproxy dump</code></p>
</blockquote>
<h2 id="删除指定代理"><a href="#删除指定代理" class="headerlink" title="删除指定代理"></a>删除指定代理</h2><blockquote>
<p><code>netsh interface portproxy delete v4tov4 listenport=3309 listenaddress=0.0.0.0</code></p>
</blockquote>
<h2 id="删除全部代理"><a href="#删除全部代理" class="headerlink" title="删除全部代理"></a>删除全部代理</h2><blockquote>
<p><code>netsh interface portproxy reset</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Python连接MSSQL</title>
    <url>/2018/04/17/Python/Python%E8%BF%9E%E6%8E%A5MSSQL/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;&emsp;最近需要做一些爬虫的工作，将爬取的内容需要存到SQL-SERVER数据库中。爬虫准备采用Python的Scrapy框架，因此将爬虫结果存进SQL-SERVER数据库自然是需要用Python来进行处理。Python有一个专门操作SQLSERVER的库叫做pymssql。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>下载pymssql<br>&emsp;&emsp;从<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql" target="_blank" rel="noopener"><strong>这里</strong></a>选取合适的版本进行下载。可能下载的速度有点慢，<a href=".\pymssql-2.1.4.dev5-cp36-cp36m-win_amd64.whl"><strong>这里</strong></a>提供了python3.6_x64版本的whl文件。</p>
</li>
<li><p>安装pymssql<br>&emsp;&emsp;通过命令<code>pip install pymssql-2.1.4.dev5-cp36-cp36m-win_amd64.whl</code>进行安装</p>
</li>
</ol>
<h2 id="pymssql的使用"><a href="#pymssql的使用" class="headerlink" title="pymssql的使用"></a>pymssql的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line"></span><br><span class="line">conn = pymssql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'sa'</span>, password=<span class="string">'1'</span>, database=<span class="string">'mytest'</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"insert into [dbo].[tabel] (name) values ('张三')"</span>)</span><br><span class="line">conn.commit()  <span class="comment"># 如果update/delete/insert记得要conn.commit()</span></span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">'select top 5 * from [dbo].[tabel]'</span>)</span><br><span class="line">print(cur.fetchall())</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>数据库</category>
        <category>ds</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SQLSERVER</tag>
        <tag>MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 学习笔记</title>
    <url>/2018/01/07/%E5%89%8D%E7%AB%AF/Vue/Vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Vue-js2-0-笔记"><a href="#Vue-js2-0-笔记" class="headerlink" title="Vue.js2.0 笔记"></a>Vue.js2.0 笔记</h2><h3 id="内部指令"><a href="#内部指令" class="headerlink" title="内部指令"></a>内部指令</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"greeting"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> exampleVM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            greeting: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"greeting"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> exampleVM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            greeting: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-if和v-show的比较"><a href="#v-if和v-show的比较" class="headerlink" title="v-if和v-show的比较"></a>v-if和v-show的比较</h4><p>&emsp;&emsp;在切换v-if时候，Vue.js有一个局部编译和卸载过程，因为v-if中模板可能包括数据绑定或子组件，v-id是惰性的，如果初始渲染条件为假，什么也做不做，在条件第一次变为真时，才开始进行局部编译（编译会被缓存起来）。<br><br>&emsp;&emsp;相比之下，v-show元素始终被编译并保留，只是简单地基于CSS切换。<br><br>&emsp;&emsp;一般来说，v-if具有更高的切换消耗，而v-show有更高的初始渲染消耗。<strong>因此需要频繁的切换，使用v-show比较好。如果运行时条件不大可能变化，使用v-if较好。</strong><br></p>
<h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"greeting"</span>&gt;</span>greeting is ok<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>=<span class="string">"greeting"</span>&gt;</span>greeting is not ok<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> exampleVM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            greeting: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>&emsp;&emsp;v-model指令用来在input、select、text、checkbox、radio等表单控件元素上创建双向数据绑定。根据控件类型v-model自动选择正确的方法更新元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    姓名：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"data.name"</span> <span class="attr">placeholder</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"data.sex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"man"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"woman"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"data.sex"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"woman"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    兴趣：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">value</span>=<span class="string">"book"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"book"</span>&gt;</span>阅读<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"swim"</span> <span class="attr">value</span>=<span class="string">"swim"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"swim"</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"game"</span> <span class="attr">value</span>=<span class="string">"game"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"game"</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"song"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"song"</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    身份：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"data.identity"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"teacher"</span> <span class="attr">selected</span>&gt;</span>教师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"doctor"</span>&gt;</span>医生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lawyer"</span>&gt;</span>律师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> exampleVM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'example'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            sex: <span class="string">''</span>,</span></span><br><span class="line">            interest: [],</span><br><span class="line"><span class="actionscript">            identity: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注1：v-model在input事件中同步输入框的值和数据，如果要伴随时间改变而不是同步改变的话，可以参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">"输入框外点击鼠标显示输入内容"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注2：v-moel可以对输入框的内容进行trim操作，具体如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">"  前后都有空格  "</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>当使用v-for时，v-model不再生效。<code>&lt;input v-for=&quot;str in strings&quot; v-model=&quot;str&quot;&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span></span><br><span class="line">        序号：&#123;&#123;index&#125;&#125;  工号：&#123;&#123;item.id&#125;&#125; 姓名：&#123;&#123;item.msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    id: <span class="string">'001'</span>,</span></span><br><span class="line"><span class="actionscript">                    msg: <span class="string">"张三"</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    id:<span class="string">'002'</span>,</span></span><br><span class="line"><span class="actionscript">                    msg: <span class="string">"李四"</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">    &#123;&#123;html&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#example"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">            html:"<span class="tag">&lt;<span class="name">li</span>&gt;</span>这是一个innerHtml<span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：不建议在网站上直接动态渲染任意HTML片段，这样很容易导致XSS攻击。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker镜像的基本操作</title>
    <url>/2017/12/03/Docker/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull [server]/imagename[:tag]</span><br></pre></td></tr></table></figure>
<p>如果不指定tag，会默认使用<code>latest</code>标签,默认服务器是<code>registry.hub.docker.com</code>,也可以使用其他注册服务器进行pull，例如DockerPool社区的镜像源<code>dl.dockerpool.com</code>下载最新的镜像。例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull dl.dockerpool.com/ubuntu:14.04</span><br></pre></td></tr></table></figure>
<h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker images</span><br><span class="line">&gt;&gt;</span><br><span class="line">REPOSITORY       TAG       IMAGE_ID        CREATED          SIZE</span><br><span class="line">ubuntu           14.04     20c44cd7596f    2 weeks ago      123 MB</span><br></pre></td></tr></table></figure>
<h3 id="为镜像打TAG"><a href="#为镜像打TAG" class="headerlink" title="为镜像打TAG"></a>为镜像打TAG</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker tag ubuntu:14.04 ubuntu:mytag</span><br></pre></td></tr></table></figure>
<p>tag标签是指向了同一个镜像，只是镜像的别名而已，标签起到了引用和快捷方式的作用。通过<code>sudo docker images</code>查看镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY       TAG       IMAGE_ID        CREATED          SIZE</span><br><span class="line">ubuntu           14.04     20c44cd7596f    2 weeks ago      123 MB</span><br><span class="line">ubuntu           mytag     20c44cd7596f    2 weeks ago      123 MB</span><br></pre></td></tr></table></figure>
<p>可以通过<code>sudo docker inspect REPOSITORY:TagName</code>或者<code>sudo docker inspect REPOSITORY:Image_ID</code>查看镜像的详细信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:20c44cd7596ff4807aef84273c99588d22749e2a7e15a7545ac96347baa65eda"</span>,</span><br><span class="line">        <span class="string">"RepoTags"</span>: [</span><br><span class="line">            <span class="string">"ubuntu:14.04"</span>,</span><br><span class="line">            <span class="string">"ubuntu:latest"</span>,</span><br><span class="line">            <span class="string">"ubuntu:mytag"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"RepoDigests"</span>: [</span><br><span class="line">            <span class="string">"ubuntu@sha256:7c67a2206d3c04703e5c23518707bdd4916c057562dd51c74b99b2ba26af0f79"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"Parent"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2017-11-17T21:59:25.014645802Z"</span>,</span><br><span class="line">        <span class="string">"Container"</span>: <span class="string">"e5f1a9df75b86a5d803eaf6f3fed6a0f8ef5fbf15a6c5039df087e4348ed8171"</span>,</span><br><span class="line">        <span class="string">"ContainerConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"e5f1a9df75b8"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/sh"</span>,</span><br><span class="line">                <span class="string">"-c"</span>,</span><br><span class="line">                <span class="string">"#(nop) "</span>,</span><br><span class="line">                <span class="string">"CMD [\"/bin/bash\"]"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"sha256:b5771e7d8dcc594b886dbdd6a9c3de60d45252ca657dfdff6e1d996728dfa2cd"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: null,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: null,</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"DockerVersion"</span>: <span class="string">"17.06.2-ce"</span>,</span><br><span class="line">        <span class="string">"Author"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"Config"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/bash"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"sha256:b5771e7d8dcc594b886dbdd6a9c3de60d45252ca657dfdff6e1d996728dfa2cd"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: null,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: null,</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="string">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"Size"</span>: 122792927,</span><br><span class="line">        <span class="string">"VirtualSize"</span>: 122792927,</span><br><span class="line">        <span class="string">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="string">"Name"</span>: <span class="string">"aufs"</span>,</span><br><span class="line">            <span class="string">"Data"</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"RootFS"</span>: &#123;</span><br><span class="line">            <span class="string">"Type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">            <span class="string">"Layers"</span>: [</span><br><span class="line">                <span class="string">"sha256:788ce2310e2fdbbf81fe21cbcc8a44da4cf648b0339b09c221abacb</span></span><br><span class="line"><span class="string">                4cd5fd136"</span>,</span><br><span class="line">                <span class="string">"sha256:aa4e47c4511638484cd5d95eadd7a8e4da307375ba31ff50d47aa9065dce01e0"</span>,</span><br><span class="line">                <span class="string">"sha256:b3968bc26fbd527f214f895aeef940a6930c62d853fe8b12bd479f0b53518150"</span>,</span><br><span class="line">                <span class="string">"sha256:c9748fbf541d3e043521e165b015d45825de33c00a8acb037443cfbd0cb5e677"</span>,</span><br><span class="line">                <span class="string">"sha256:2f5b0990636a87f1557d64ba39808dcd64031328b2a159c5805115b8e725bbbc"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>上面返回的JSON信息太多，如果只需要其中部分内容，可以使用<code>-f</code>参数来指定，例如获取Architecture信息：<br><br><code>sudo docker inspect -f .Architecture ubuntu:14.04</code><br><br>返回内容：<br><br><code>amd64</code><br></p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker rmi REPOSITORY:TagName</span><br></pre></td></tr></table></figure>
<p>当镜像只剩下一个标签时候，使用此命令会彻底删除该镜像。</p>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>创建镜像有三种方式：基于已有镜像的容器创建、基于本地模板导入、基于Dockerfile创建。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>语音处理简介</title>
    <url>/2017/09/09/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E8%AF%AD%E9%9F%B3%E5%A4%84%E7%90%86/%E8%AF%AD%E9%9F%B3%E5%A4%84%E7%90%86%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>通常认为语音信息的交换大致可以分为三大类：</p>
<ol>
<li>人与人之间的语言通信，包括语音压缩和编码、语音增强等。</li>
<li>第一类人机语言通信问题，指的是机器人讲话、人听话的研究，即语音合成。</li>
<li>第二类人机语言通信问题，指的是人讲话、机器听话的研究，即语音识别与理解。</li>
</ol>
]]></content>
      <categories>
        <category>数据处理</category>
      </categories>
      <tags>
        <tag>语音处理</tag>
      </tags>
  </entry>
  <entry>
    <title>通过函数指针进行初始化</title>
    <url>/2017/09/07/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%BC%96%E7%A8%8B/%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<p>&emsp;&emsp;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span>  <span class="params">(*Init_board)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_function</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">const</span> Init_board Init_Sequnce[] = </span><br><span class="line">&#123;</span><br><span class="line">  Init_function,</span><br><span class="line">  <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Funs_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Init_board *call = Init_Sequnce;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(; *call; ++call)</span><br><span class="line">    (*call)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>函数指针</tag>
      </tags>
  </entry>
  <entry>
    <title>数据曲线拟合</title>
    <url>/2017/09/05/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E6%8B%9F%E5%90%88/%E6%95%B0%E6%8D%AE%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>梯度下降(吴恩达公开课笔记)</title>
    <url>/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1、梯度下降思想"><a href="#1、梯度下降思想" class="headerlink" title="1、梯度下降思想"></a>1、梯度下降思想</h1><p>&emsp;&emsp;梯度下降背后的思想是：开始随机选取一个参数的组合$({\theta}_{0},{\theta}_{1},…,{\theta}_{n})$，计算代价函数，然后虚招下一个能让代价函数下降最多的参数组合。一直迭代下去直到找到一个局部最小值停止。因为并没有遍历所有的参数组合，所以不能确定局部最小值就是去全局最小值，如果代价函数具有多个极值点，那么选择不同的初始参数组合，可能会找到不同的局部最小值。</p>
<h1 id="2、参数更新"><a href="#2、参数更新" class="headerlink" title="2、参数更新"></a>2、参数更新</h1><p>&emsp;&emsp;当参数只有两个的时候（一个特征）,代价函数为$J({\theta}_{0},{\theta}_{1})$。<br>&emsp;&emsp;repeat until convergence: $${ {\theta}_{j} := {\theta}_{j} - \alpha\frac{<br>\partial}{\partial{\theta}_{j} }J({\theta}_{0},{\theta}_{1}) } \quad for(j=0\quad and\quad  j=1)$$<br>&emsp;&emsp;$temp0:={\theta}_{0}-\alpha\frac{<br>\partial}{\partial{\theta}_{0} }J({\theta}_{0},{\theta}_{1})$<br>&emsp;&emsp;$temp1:={\theta}_{1}-\alpha\frac{<br>\partial}{\partial{\theta}_{1} }J({\theta}_{0},{\theta}_{1})$<br>&emsp;&emsp;${\theta}_{0}:=temp0$<br>&emsp;&emsp;${\theta}_{1}:=temp1$<br>&emsp;&emsp;其中$alpha$是学习率，学习率决定了代价函数下降的大小。在批量梯度下降中，每一次都同时让所有的参数都减去学习速率乘以代价函数的偏导数。</p>
<h1 id="3、批量梯度下降"><a href="#3、批量梯度下降" class="headerlink" title="3、批量梯度下降"></a>3、批量梯度下降</h1><p>下面的h(x)是要拟合的函数，J(theta)损失函数，theta是参数，要迭代求解的值，theta求解出来了那最终要拟合的函数h(theta)就出来了。其中m是训练集的记录条数，j是参数的个数。<br><img src="/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/%E6%B1%82%E5%AF%BC.jpg" alt><br>（1）将J(theta)对theta求偏导，得到每个theta对应的的梯度<br><img src="/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/%E6%B1%82%E5%AF%BC.jpg" alt="enter description here"><br>（2）由于是要最小化风险函数，所以按每个参数theta的梯度负方向，来更新每个theta<br><img src="/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/%E6%B1%82%E5%AF%BC.jpg" alt="enter description here"><br>（3）从上面公式可以注意到，它得到的是一个全局最优解，但是每迭代一步，都要用到训练集所有的数据，如果m很大，那么可想而知这种方法的迭代速度！！所以，这就引入了另外一种方法，随机梯度下降。</p>
<h1 id="4、随机梯度下降"><a href="#4、随机梯度下降" class="headerlink" title="4、随机梯度下降"></a>4、随机梯度下降</h1><p>（1）上面的风险函数可以写成如下这种形式，损失函数对应的是训练集中每个样本的粒度，而上面批量梯度下降对应的是所有的训练样本：<br><img src="/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/%E6%B1%82%E5%AF%BC.jpg" alt="enter description here"><br>（2）每个样本的损失函数，对theta求偏导得到对应梯度，来更新theta<br><img src="/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/%E6%B1%82%E5%AF%BC.jpg" alt="enter description here"><br>（3）随机梯度下降是通过每个样本来迭代更新一次，如果样本量很大的情况（例如几十万），那么可能只用其中几万条或者几千条的样本，就已经将theta迭代到最优解了，对比上面的批量梯度下降，迭代一次需要用到十几万训练样本，一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。但是，SGD伴随的一个问题是噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。</p>
<h1 id="5、两种梯度下降对比"><a href="#5、两种梯度下降对比" class="headerlink" title="5、两种梯度下降对比"></a>5、两种梯度下降对比</h1><h2 id="5-1-批量梯度下降"><a href="#5-1-批量梯度下降" class="headerlink" title="5.1 批量梯度下降"></a>5.1 批量梯度下降</h2><p>&emsp;&emsp;最小化所有训练样本的损失函数，使得最终求解的是全局的最优解，即求解的参数是使得风险函数最小。</p>
<h2 id="5-2-随机梯度下降"><a href="#5-2-随机梯度下降" class="headerlink" title="5.2 随机梯度下降"></a>5.2 随机梯度下降</h2><p>&emsp;&emsp;最小化每条样本的损失函数，虽然不是每次迭代得到的损失函数都向着全局最优方向， 但是大的整体的方向是向全局最优解的，最终的结果往往是在全局最优解附近。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>梯度下降</tag>
      </tags>
  </entry>
  <entry>
    <title>时间序列算法</title>
    <url>/2017/09/02/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1、时间序列预处理"><a href="#1、时间序列预处理" class="headerlink" title="1、时间序列预处理"></a>1、时间序列预处理</h1><a id="more"></a>
<p>&emsp;&emsp;得到一个观测序列之后，要分析检验序列的随机性和平稳性。两个重要的检验称为序列的预处理。对于不同类型的序列需要采用不同的分析方法。</p>
<ol>
<li>对于纯随机序列，又称白噪声序列，序列各个观测值之间没有任何关系，序列是完全无序的随机波动，则可以不用对序列继续分析。因为白噪声序列是没有任何信息可以提取的<strong>平稳序列</strong>。</li>
<li>对于平稳非白噪声序列，它的均值和方差是常数。目前已经有一套非常成熟的平稳序列的建模方法。通常是建议一个线性模型来拟合序列的发展。<strong>ARMA</strong>是最常用的平稳序列拟合模型。</li>
<li>对于非平稳序列，由于序列本身的均值和方差不稳定，处理方法一般是==将其转为平稳序列==，然后采用平稳序列的模型进行分析。对于非平稳序列，经过差分之后具有平稳性则称差分平稳序列，对于差分平稳序列可以使用ARMA模型对其进行分析。</li>
</ol>
<h2 id="1-1-平稳性检验"><a href="#1-1-平稳性检验" class="headerlink" title="1.1 平稳性检验"></a>1.1 平稳性检验</h2><p>&emsp;&emsp;平稳性检验主要有两种方法：基于时序图和自相关图做出判断的方法，该方法简单方便，应用广泛，但是具有主观性。另一种方法是构造检验统计量进行验证，该方法最常用的方法是<strong>单位根检测</strong>。</p>
<h3 id="1-1-1-时序图检验"><a href="#1-1-1-时序图检验" class="headerlink" title="1.1.1  时序图检验"></a>1.1.1  时序图检验</h3><p>&emsp;&emsp;平稳序列的时序图表现出始终在一个常数附近波动，波动范围有界。如果时序图有明显的趋势性或者周期性通常是非平稳序列。</p>
<h3 id="1-1-2-自相关图检验"><a href="#1-1-2-自相关图检验" class="headerlink" title="1.1.2  自相关图检验"></a>1.1.2  自相关图检验</h3><p>&emsp;&emsp;平稳序列具有短周期相关性，这性质表明平稳序列通常只有近期的序列值对当前值有明显的影响，随着延迟时间加长，自相关系数会衰减到0，并在0附近随机波动。而对于非平稳序列，自相关系数会衰减缓慢。<br>通过Matlab进行仿真：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">fs=500;</span><br><span class="line">t=1/500:1/500:1;</span><br><span class="line">f=5;</span><br><span class="line">r=randn(1,fs)*0.2;</span><br><span class="line">y=sin(2*pi*t*f);</span><br><span class="line">ycorr=xcorr(y,y);</span><br><span class="line">rcorr=xcorr(r,r);</span><br><span class="line">subplot(211);plot(t,y);title('非平稳序列时序图')</span><br><span class="line">subplot(212);plot(ycorr);title('非平稳序列自相关图')</span><br><span class="line">figure</span><br><span class="line">subplot(211);plot(t,r);title('平稳序列时序图')</span><br><span class="line">subplot(212);plot(rcorr);title('平稳序列时序图')</span><br></pre></td></tr></table></figure>
<p><img src="/2017/09/02/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/.%5C%E9%9D%9E%E5%B9%B3%E7%A8%B3%E5%BA%8F%E5%88%97%E6%97%B6%E5%BA%8F%E5%9B%BE%E4%B8%8E%E8%87%AA%E7%9B%B8%E5%85%B3%E5%9B%BE.jpg" alt="非平稳序列时序图与自相关图"></p>
<p><img src="/2017/09/02/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/.%5C%E5%B9%B3%E7%A8%B3%E5%BA%8F%E5%88%97%E6%97%B6%E5%BA%8F%E5%9B%BE%E4%B8%8E%E8%87%AA%E7%9B%B8%E5%85%B3%E5%9B%BE.jpg" alt="平稳序列时序图与自相关图"></p>
<h3 id="1-1-3-单位根检测"><a href="#1-1-3-单位根检测" class="headerlink" title="1.1.3 单位根检测"></a>1.1.3 单位根检测</h3><p>&emsp;&emsp;对序列是否具有单位根进行检测，如果存在单位根，则是非平稳序列，反之，是平稳序列。单位根检测有很多种方法。此处主要介绍：<strong>DF检测(Dicky-Fuller Test)</strong>和<strong>ADF检测</strong>。</p>
<h2 id="1-2-纯随机性检测"><a href="#1-2-纯随机性检测" class="headerlink" title="1.2 纯随机性检测"></a>1.2 纯随机性检测</h2><p>&emsp;&emsp;纯随机性检验也称为白噪声检验，一般用构造的统计量来检验序列的纯随机性，常用的统计量有Q统计量和LB统计量。<br>&emsp;&emsp;序列值之间的变异是绝对的，但是相关性是偶然的，则可以做如下假设：<br> &emsp;&emsp;- 原假设：延迟期数不大于$m$期的序列值是相互独立的。<br> &emsp;&emsp;- 备用假设：延时期数不大于$m$期的序列值是相关的。<br> &emsp;&emsp;数学语言描述：<br> &emsp;&emsp;${H}_{0}$:${\rho}_{1}={\rho}_{2}=…={\rho}_{m},\forall m\geq1$<br> &emsp;&emsp;${H}_{1}$:至少存在某个${\rho}_{k}\neq0,\forall m\geq1,k\leq m$</p>
]]></content>
      <categories>
        <category>数字信号处理</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>时间序列</tag>
      </tags>
  </entry>
  <entry>
    <title>Logistic函数</title>
    <url>/2017/09/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Logistic%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="1、Logistic函数推导"><a href="#1、Logistic函数推导" class="headerlink" title="1、Logistic函数推导"></a>1、Logistic函数推导</h1><a id="more"></a>

<p>&emsp;&emsp;Logistic回归模型中，因变量只有0和1两种情况。假设在$p$个独立自变量${x}_{1}$,${x}_{2}$,…,${x}_{p}$,的作用下，记$y$取1的概率是$p=P(y=1|X)$，则取0的概率是$1-p$。那么取1和取0的概率之比为$\frac{p}{1-p}$，该比值称为<strong>发生比</strong>（odds）。两个不同时间的发生比之比称为<strong>优势比</strong>，$\frac{p1}{1-p1}/\frac{p2}{1-p2}$。Logistic一般用发生比odds进行解释。<br>&emsp;&emsp;对发生比取自然对数即为$$Logit(p)=ln(\frac{p}{1-p})$$<br>&emsp;&emsp;令$Logit(p)=Z$，通过化简即可得到$p=\frac{1}{1+e^{-z}}$。$p=\frac{1}{1+e^{-z}}$就是Logistic函数。<br>&emsp;&emsp;因为$p$在$(0,1)$取值，则$Logit(p)$在$(0,+\propto)$取值，Logistic函数在$(-\propto,+\propto)$取值。</p>
<h1 id="2、Logistic回归模型"><a href="#2、Logistic回归模型" class="headerlink" title="2、Logistic回归模型"></a>2、Logistic回归模型</h1><p>&emsp;&emsp;Logistic回归模型是建立在$ln(\frac{p}{1-p})$与自然变量的线性回归模型。Logistic回归模型的公式为：$$ln(\frac{p}{1-p})={\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p}+\varepsilon $$<br>&emsp;&emsp;因为$ln(\frac{p}{1-p})$的取值是$(-\propto,+\propto)$,所以自然变量${x}_{1}$,${x}_{2}$,…,${x}_{p}$的取值是任意范围的。<br>&emsp;&emsp;记$g(x)={\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p}$，得到$p=\frac{1}{1+e^{-g(x)}}$，$1-p=\frac{1}{1+e^{g(x)}}$。<strong>此处忽略$\varepsilon$</strong>。</p>
<h1 id="3、Logistic回归模型的建模步骤"><a href="#3、Logistic回归模型的建模步骤" class="headerlink" title="3、Logistic回归模型的建模步骤"></a>3、Logistic回归模型的建模步骤</h1><ol>
<li>根据目标数据设置指标变量(因变量、自变量)，然后收集数据。</li>
<li>用$ln(\frac{p}{1-p})$和自变量列出回归方程，估计出模型中的回归系数。$$ln(\frac{p}{1-p})={\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p} $$</li>
<li>进行模型检验，根据输出的方差分析表中的$F$值和$p$值来检验该回归方程是否显著。如果$p$值小于显著水平$\alpha$则模型通过检验，可以进行下一步回归系数的检验，否则重新选择指标变量，重新建立回归方程。</li>
<li>在多元线性回归中，并不是每个自变量都会对$y$产生显著的影响，需要对每一个自变量都进行显著性检验，使得那些次要可有可无的变量不参与回归过程，去除之后便可建立更加简单有效的回归方程。</li>
<li>模型应用。</li>
</ol>
<h1 id="4、对一般Logistic模型系数的解释"><a href="#4、对一般Logistic模型系数的解释" class="headerlink" title="4、对一般Logistic模型系数的解释"></a>4、对一般Logistic模型系数的解释</h1><br>
> 该部分引用[这里][1]

<p>&emsp;&emsp;广义的线性模型由三部分组成：随机部分、系统部分和连接部分。直观地理解这种差异：将两种模型都视为广义线性模型的特殊形式。广义线性模型由三个部分组成：随机部分、系统部分和连接部分。</p>
<p>&emsp;&emsp;随机部分指的是变量Y以及Y的概率分布，传统线性模型Y是连续变量并假设其服从正态分布。在经典logistic回归中，Y是一个二分变量并服从二项式分布。</p>
<p>&emsp;&emsp;系统部分指的是解释变量以及这些解释变量如何组合在一起构成了解释方程，在传统线性模型和logistic回归中都是这样：${\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p}$ ，这个表达通常被称为线性预测（linear predictor），而x与其他解释变量还可以结合（如相乘交互），因此可以做出其实非线性的预测。</p>
<p>&emsp;&emsp;连接部分说明了Y的均值 μ =E（Y）如何与线性预测相联系。</p>
<blockquote>
<p>其实说白了就是，随机部分规定了 Y，系统部分规定了 X，而连接部分就是用一个连接函数（link function）将 X 与 Y连了起来，也就是我们经常看到的回归方程，它所反映的是 x 的变化带来的 Y 的均值的变化。</p>
</blockquote>
<p>&emsp;&emsp;对Logit模型系数解释的一个总的原则是：方向看系数，大小看exp(系数)，不管自变量是连续变量还是虚拟变量 or 其他。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Logistic</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习简介</title>
    <url>/2017/09/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="1、机器学习三要素"><a href="#1、机器学习三要素" class="headerlink" title="1、机器学习三要素"></a>1、机器学习三要素</h1><a id="more"></a>

<h2 id="1-1-任务"><a href="#1-1-任务" class="headerlink" title="1.1 任务"></a>1.1 任务</h2><p>&emsp;&emsp;机器学习的任务有很多，其中两种最经典的任务就是<strong>监督学习</strong>和<strong>无监督学习</strong>。其中监督学习主要是对事物进行预测，预测一般包括<strong>分类</strong>和<strong>回归</strong>。而无监督学习则主要是对事物本身特性进行分析，一般主要用来进行<strong>数据降维</strong>和<strong>聚类</strong>。<br>&emsp;&emsp;分类问题主要是用在预测变量是离散情况的问题上，而预测问题主要是针对预测变量是连续情况的问题。<br>&emsp;&emsp;数据降维主要是对事物的特性进行筛选和压缩。比如处理图片时候，直接利用图像的像素求解问题，那么数据的维度会非常高，因此可以采用数据降维技术对图像进行降维处理，利用最具有区分度的像素对图像进行重组，达到避免维数灾难的效果。<br>&emsp;&emsp;聚类则是依据数据的相似性对数据样本划分成不同的<strong>簇</strong>。聚类问题不同于分类问题，分类问题中分类的个数和每个分类的含义都是确定的，而聚类问题中簇的个数和每个簇的具体含义是未知的。</p>
<h2 id="1-2-经验"><a href="#1-2-经验" class="headerlink" title="1.2 经验"></a>1.2 经验</h2><p>&emsp;&emsp;一般把数据看做经验，实际中是对机器学习任务有用的信息才会被看做是经验。通常把反应数据内在规律的信息称作为<strong>特征</strong>。<br>&emsp;&emsp;监督学习问题中，经验主要包括<strong>特征</strong>和<strong>标签</strong>两部分。正常情况下，使用一个特征向量和一个标签来表示一个数据样本。<br>&emsp;&emsp;无监督学习问题中，并没有标签，因此无法进行预测。但是无监督学习对数据结构分析却更胜一筹。在生活中，一般获取的数据都是无标签数据，对数据进行打标签会花费大量的时间、人力等。</p>
<h2 id="1-3-性能"><a href="#1-3-性能" class="headerlink" title="1.3 性能"></a>1.3 性能</h2><p>&emsp;&emsp;所谓性能，是指学习任务完成质量的评价指标。一般流程是：准备测试样本，使用相同的特征提取方法进行特征提取，然后通过训练好的模型进行预测，对比预测结果和测试样本本身的标签。一般情况下测试样本不用于模型的训练。如果没有单独的测试样本，通常的做法是在原始数据中随机选取3/4作为训练样本，剩余的1/4作为预测样本。通过测试样本正确预测的个数进行准确率的计算。<br>&emsp;&emsp;对于回归问题，通常是将预测值和实际值之间的误差大小作为性能评价指标。<br>&emsp;&emsp;具体的机器学习算法评价指标请参见[这里]。<br>  [这里]: <a href="https://njuferret.github.io/2017/08/29/machinelearning_roc_pr/" target="_blank" rel="noopener">https://njuferret.github.io/2017/08/29/machinelearning_roc_pr/</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>三要素</tag>
      </tags>
  </entry>
  <entry>
    <title>基于RK3188平台与Android5.1的AP6212蓝牙与wifi调试记录</title>
    <url>/2017/08/30/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%9F%BA%E4%BA%8ERK3188%E5%B9%B3%E5%8F%B0%E4%B8%8EAndroid5.1%E7%9A%84AP6212%E8%93%9D%E7%89%99%E4%B8%8Ewifi%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近调试了一款基于RK3188与Android5.1的板子，蓝牙和wifi的芯片采用的是AP6212，AP6212文档在<a href="相关文档\AP6212_V1.1_09022014.pdf"><strong>这里</strong></a>。存在的问题是Wifi和蓝牙都不能扫描设备。</p>
<a id="more"></a>
<h3 id="1-AP6212管脚图"><a href="#1-AP6212管脚图" class="headerlink" title="1. AP6212管脚图"></a>1. AP6212管脚图</h3><div align="center">
    ![AP6212管脚.jpg](AP6212管脚.jpg)
</div>

<p>&emsp;&emsp;管脚10和管脚11是26M晶振的IN和OUT，要求26M晶振的频偏是10ppm。24管脚是32.768KHz晶振的输入脚，如果管脚22（VDD）的幅度为1.8v，则要求24管脚的幅度是1.7v-1.8v，如果管脚22（VDD）的幅度为3.3v，则要求24管脚的幅度是3v-3.3v。通过调整管脚22之前的分压电阻来调整幅度满足要求。通过以上操作可以使得wifi搜的信号，并能连接网络。如果wifi不能工作尝试换一下其他26M晶振。</p>
<h3 id="2-更新蓝牙固件"><a href="#2-更新蓝牙固件" class="headerlink" title="2. 更新蓝牙固件"></a>2. 更新蓝牙固件</h3><p>&emsp;&emsp;经过如上操作，可以使得wifi正常工作，并且蓝牙也能扫描出附近的蓝牙设备，并且能和蓝牙2.0配对，但是不能连接BLE。问题解决办法：联系AP6212的供应商，提供新的AP6212蓝牙固件。对Android5.1系统进行蓝牙固件更新。</p>
<h4 id="2-1-固件更新方法"><a href="#2-1-固件更新方法" class="headerlink" title="2.1 固件更新方法"></a>2.1 固件更新方法</h4><ol>
<li>安装adb调试工具，配置adb.exe的环境变量</li>
<li>将Android5设备与电脑连接</li>
<li>通过<code>adb root</code>获得root权限，执行<code>adb remount</code></li>
<li>push更新固件<code>adb push bcm43438a0.hcd /vendor/firmware/bcm43438a0.hcd</code></li>
<li>重新启动安卓设备，测试蓝牙连接</li>
</ol>
<p><strong>固件位置要查看android源码进行查找，可以通过<code>locate bt_vendor.conf</code>对配置文件进行定位，比如<code>FwPatchFilePath = /vendor/firmware/</code></strong></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>RK3188</tag>
        <tag>Wifi</tag>
        <tag>蓝牙</tag>
        <tag>Android5.1</tag>
      </tags>
  </entry>
  <entry>
    <title>数据质量分析</title>
    <url>/2017/08/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>&emsp;&emsp;数据质量分析主要是分析数据源是否含有脏数据。所谓的脏数据是指不符合要求的数据，不能对其进行相应的分析。主要的脏数据有：<br> <a id="more"></a></p>
<ol>
<li>缺失值</li>
<li>异常值</li>
<li>不一致的值</li>
<li>重复数据或者含有特殊符号的数据</li>
</ol>
<h2 id="2-缺失值分析"><a href="#2-缺失值分析" class="headerlink" title="2. 缺失值分析"></a>2. 缺失值分析</h2><p>&emsp;&emsp;缺失值主要包括记录缺失和记录中某项字段信息缺失。使用简单的统计就可以得到含有缺失值的属性个数，以及每个字段的未缺失数、缺失数以及缺失率等。一般情况处理缺失值主要有三种方法：</p>
<ol>
<li>直接将含有缺失值的记录删除</li>
<li>对缺失值进行插值补充</li>
<li>不处理缺失值</li>
</ol>
<p>缺失值产生的影响<br>&emsp;<em>1. 数据分析时将会丢失大量的有用信息。</em><br>&emsp;<em>2. 数据分析模型更难把握数据中蕴含的规律。</em><br>&emsp;<em>3. 可能会使模型建模陷入混乱，导致错误的输出。</em></p>
<h2 id="3-异常值分析"><a href="#3-异常值分析" class="headerlink" title="3. 异常值分析"></a>3. 异常值分析</h2><p>&emsp;&emsp;异常值检测是检验数据是否录入错误以及是否含有不合常理的值。异常值是属于个别值，其数值明显偏离其余观测值。因此异常值也成为离群点。一般情况下处理异常值主要有三种方法：</p>
<h3 id="3-1-简单的统计分析"><a href="#3-1-简单的统计分析" class="headerlink" title="3.1 简单的统计分析"></a>3.1 简单的统计分析</h3><p>&emsp;最常用的统计量就是最大值和最小值。通过最大值和最小值对数据进行判断是否超出了合理的范围。</p>
<h3 id="3-2-3-sigma-原则"><a href="#3-2-3-sigma-原则" class="headerlink" title="3.2 $3\sigma$原则"></a>3.2 $3\sigma$原则</h3><p>&emsp;如果数据服从正态分布，在$3\sigma$原则下，异常值被定义为一组测定值与平均值偏差超过三倍标准差值。$P(|x-\mu|&gt;3\sigma)\leq0.003$属于极个别的小概率事件。</p>
<h3 id="3-3-盒形图分析"><a href="#3-3-盒形图分析" class="headerlink" title="3.3 盒形图分析"></a>3.3 盒形图分析</h3><p>&emsp;盒形图也称箱形图，提供了识别异常值的一个标准：小于${Q}_{L}-1.5QR$和大于${Q}_{U}-1.5QR$的数据均被认为是异常值，其中$ {Q}_{L}$是下四分位，${Q}_{U}$是上四分位，$ QR={Q}_{U}-{Q}_{L}$。<br>&emsp;四分位数具有一定的鲁棒性，用盒形图分析异常数据的结果比较客观。</p>
<h2 id="4-一致性分析"><a href="#4-一致性分析" class="headerlink" title="4. 一致性分析"></a>4. 一致性分析</h2><p>&emsp;&emsp;不一致是指数据的矛盾性、不相容性。出现这种情况主要是因为待分析的数据来源于不同的数据源或者相同的重复数据没有同步更新，比如数据源中有两张表同时含有用户姓名，更新姓名时候只更新一张表没有更新第二张表则会出现数据不一致性导致数据矛盾不相容。</p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
</search>
